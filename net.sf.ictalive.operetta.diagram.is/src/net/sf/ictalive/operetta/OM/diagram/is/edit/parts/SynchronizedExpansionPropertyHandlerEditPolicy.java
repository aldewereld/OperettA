package net.sf.ictalive.operetta.OM.diagram.is.edit.parts;

import java.util.HashMap;
import java.util.Map;

import org.eclipse.gef.Request;
import org.eclipse.gef.commands.CompoundCommand;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ResizableCompartmentEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.PropertyHandlerEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.internal.properties.Properties;
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;
import org.eclipse.gmf.runtime.diagram.ui.requests.ChangePropertyValueRequest;

public abstract class SynchronizedExpansionPropertyHandlerEditPolicy extends PropertyHandlerEditPolicy {
	
	public abstract ResizableCompartmentEditPart getSynchronizedCompartment();
		
	/* 
	 * Property handler edit policy that sends expands/collapse events to the editpart specified by
	 * getSynchronizedCompartment(). The generated property change has an extended data object containing
	 * the string "Internal" that prevents the change event from firing another event, which would create a loop.  
	 */
	public org.eclipse.gef.commands.Command getCommand(Request request) {
		if (getSynchronizedCompartment() != null && request instanceof ChangePropertyValueRequest &&
				((ChangePropertyValueRequest)request).getPropertyID().equals(Properties.ID_COLLAPSED)) {
			ChangePropertyValueRequest changePropReq = (ChangePropertyValueRequest)request;
			
			Map<Integer, String> extendedData = changePropReq.getExtendedData();
			if (extendedData == null || extendedData.get(0)!="Internal" && changePropReq.getValue() instanceof Boolean)
			{ // don't synchronize when extendedData contains "Internal" because then the property change was generated by this class.
				
				ChangePropertyValueRequest r = new ChangePropertyValueRequest(
						DiagramUIMessages.PropertyDescriptorFactory_CollapseCompartment,
						Properties.ID_COLLAPSED,  (Boolean)changePropReq.getValue());
				HashMap<Integer, String> map = new HashMap<Integer, String>();
				map.put(0, "Internal");
				r.setExtendedData(map);
								
				org.eclipse.gef.commands.Command cc = getSynchronizedCompartment().getCommand(r);

				org.eclipse.gef.commands.Command sceneCommand = super.getCommand(request);
				CompoundCommand compoundComm = new CompoundCommand();
				compoundComm.add(sceneCommand);
				compoundComm.add(cc);
				return compoundComm;
			}
		}


		return super.getCommand(request);	
	}
}
