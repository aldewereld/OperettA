<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Overview</title>
  <link rel="stylesheet" href="shared.css" type="text/css" />	
  </head>

<body>
<div class="menu">
	<div class="tooltipy" style="margin-top:10px;"><a href="http://org.eclipse.ui.intro/showPage?id=overview"><img src="images/yellow.png" height="24" width="24" border="0" /><span class="yellow" style="font-size:9px;">Overview</span></a></div>
    <div class="tooltip" style="margin-top:30px;"><a href="http://org.eclipse.ui.intro/showPage?id=tutorials"><img src="images/red.png" height="24" width="24" border="0" /><span style="font-size:9px;">Tutorials</span></a></div>
    <div class="tooltip" style="margin-left:-10px;"><a href="http://org.eclipse.ui.intro/showPage?id=methodology"><img src="images/green.png" width="24" height="24" border="0" /><span style="font-size:9px;">Methodology</span></a></div>
    <div class="tooltip" style="margin-left:50px;"><a href="http://org.eclipse.ui.intro/showPage?id=servicetemplates"><img src="images/left.png" width="24" height="24" border="0" /><span style="font-size:9px;">Previous</span></a></div>
    <div class="tooltipup"><a href="http://org.eclipse.ui.intro/showPage?id=services"><img src="images/up.png" width="24" height="24" border="0" /><span style="font-size:9px;">Up</span></a></div>
    <div class="tooltip"><a href="http://org.eclipse.ui.intro/showPage?id=servicesetup"><img src="images/right.png" width="24" height="24" border="0" /><span style="font-size:9px;">Next</span></a></div>
    <div class="tooltip" style="margin-left:50px;"><a href="http://org.eclipse.ui.intro/close"><img src="images/workspace.png" width="24" height="24" border="0" /><span style="font-size:9px;">Go to workbench</span></a></div>
</div>

<div class="bg">
<img id="background-img" src="images/alive_background.jpg" class="bg" />
</div>

<div class="page-style">
    <div id="content"> 	
        <h2>Matchmaker</h2>
      <p>The matchmaker library is designed as an advanced OWL-S service registry. Services are primarily modelled as function signatures, i.e., a set of inputs and a set of outputs, but they can have arbitrary metadata too. Each input and output is associated with an OWL class that defines the set of allowable values for it.</p>
        <p> The primary function of the matchmaker is to answer matching queries. The matchmaker is given a signature, for example: Input parameter types: {City}, Output parameter types: {Weather} (we will call input parameter types and output parameter types simply “inputs” and “outputs” from now on) which we can also succinctly write as: query: (City)&rarr;(Weather), and is asked about which of the registered services &quot;match&quot; it in some sense. The outputs of the query signature are interpreted as requirements (all of them must be satisfied by the outputs of a matching service), while its inputs are interpreted as capabilities (all inputs of a matching service must be satisfiable by using only the declared inputs of the query). Then, the matchmaker returns an unordered set of matches. The user may subsequently rank the results with the supplied <em>preferences framework</em>, e.g. by creating a preference expression and using it to select the top elements (according to the user preferences) of the results.</p>
        <p> Services are registered and queried using OWL-S, handled in Java using the OWL-S API.</p>
        <p>A matchmaker can be used directly in an application or it can be deployed as a web service, either on an application server or stand-alone. </p>
        <h3>Step Through</h3>
      <h4>Download</h4>
        <p>You can find the latest bundle of the matchmaker at the ICT-ALIVE project at sourceforge, located under the folder alive-matchmaker. Source files and documentation is included. To use the matchmaker, you need the alive-matchmaker.jar (found in /dist folder of the bundle), as well as its dependencies jars (located in /dist/lib). </p>
<h4>Building the project from the source</h4>
        <p>You can checkout the project from the svn repository:</p>
        <p> https://ict-alive.svn.sourceforge.net/svnroot/ict-alive/ServiceLevel/alive-matchmaking/trunk</p>
        <p> An (ant) build script is included, of which the default target bundles the project.</p>
<h4>Bootstrapping and registration of services</h4>
        <p>The main matchmaker types reside in the edu.bath.matchmaker package. The first step to use the matchmaker is to instantiate it:</p>
<p style="font-family:'Courier New', Courier, monospace;">import edu.bath.matchmaker.*;<br />
          ...<br />
          MatchMaker matchMaker = new MatchMaker();</p>
      <p>Of course, at this point the matchmaker does not know any service, so we need to register some existing services to it to make them available for matching:</p>
          <p style="font-family:'Courier New', Courier, monospace;">URI existingService = URI.create(&quot;http://www.mindswap.org/2004/owl 
      -s/1.1/AmazonBookPrice.owl&quot;);</p>
      <p>This URI points to an OWL-S service description. It could point to a file in the local filesystem as well:</p>
          <p style="font-family:'Courier New', Courier, monospace;">URI existingService = new File(&quot;services/AmazonBookPrice.owl&quot;)
      .toURI();</p>
          <p>To register a service to the matchmaker, we need to parse it and give the result to the matchmaker:</p>
      <p style="font-family:'Courier New', Courier, monospace;">matchMaker.register(OwlsUtils.parseURI(existingService));</p>
          <p>The OWL-S service description is supposed to reference any required (OWL) ontology that defines the classes (and their subsumption hierarchy) which are used to annotate the service inputs and outputs. The matchmaker automatically merges any such ontological information.</p>
          <p> The class OwlsUtils includes various other parsing utilities. Parsing creates an instance of org.mindswap.owl.OWLOntology, which is part of the OWLS-API.<br />
            Sequentially parsing and registering a bunch of services one by one can be a slow process. If you intend registering a large number of services, consider using the following:</p>
      <p style="font-family:'Courier New', Courier, monospace;">Collection&lt;URI&gt; services = ...;<br />
        <br />
        ExecutorService threadPool = Executors.newFixedThreadPool(4 * Runtime.getRuntime().availableProcessors());<br />
          try {<br />
  <img class="tab" src="images/spacer.gif" /> MatchMakers.bulkRegister(matchMaker, services, threadPool);<br />
          } finally {<br />
  <img class="tab" src="images/spacer.gif" /> threadPool.shutdown();<br />
      }</p>
        <p>This code tries to overlap parsing and registration of different services, if possible. Note that we use more threads than available processors since we expect this process to be I/O bound.<br />
          More services can be registered at any point, and they can be deregistered too, e.g., by:</p>
      <p style="font-family:'Courier New', Courier, monospace;">matchMaker.deregisterService(existingService);</p>
<h4>Matching</h4>
        <p>Matching is performed by describing a service (the query) using OWL-S, and in particular using an OWLOntology instance (just as registering a service). To perform the matching, the matchmaker extracts the query's signature, and then tries to find services that match it. Specifically, a service matches a query if both these conditions hold:</p>
        <ul type="disc">
          <li>for each query output, there      exists some service output that satisfies it, and</li>
          <li>for each service input, there      exists some query input that satisfies it.        </li>
        </ul>
        <p>But what does it mean for a service output to &quot;satisfy&quot; a query output? Or what does it mean for a service input to be &quot;satisfied&quot; by a query input? Our matchmaker offers lots of flexibility here - these notions are supplied by the user, in the form of InputMatcher and OutputMatcher enumerations. In particular, to specify when a service input SI can be satisfied by a query input QI, we have the following options:<br />
      </p>
        <ul type="disc">
          <li>InputMatcher.EXACT, meaning QI      must be equivalent to SI</li>
          <li>InputMatcher.SUPERCLASSES, meaning      QI must be a superclass of SI</li>
          <li>InputMatcher.SUBCLASSES, meaning      QI must be a subclass of SI</li>
          <li>InputMatcher.IMMEDIATE_SUPERCLASSES,      meaning QI must be equivalent to, or a direct superclass of SI</li>
          <li>InputMatcher.IMMEDIATE_SUBCLASSES,      meaning QI must be equivalent to, or a direct subclass of SI</li>
        </ul>
        <p>Similarly, to specify when a service output SO can satisfy a query output QO, we have:</p>
      <ul type="disc">
          <li>OutputMatcher.EXACT, meaning SO      must be equivalent to QO</li>
          <li>OutputMatcher.SUPERCLASSES,      meaning SO must a superclass of QO</li>
          <li>OutputMatcher.SUBCLASSES, meaning      SO must be a subclass to QO</li>
          <li>OutputMatcher.IMMEDIATE_SUPERCLASSES,      meaning SO must be equivalent to, or a direct superclass of QO</li>
          <li>OutputMatcher.IMMEDIATE_SUBCLASSES,      meaning SO must be equivalent to, or a direct subclass of QO</li>
        </ul>
        <p>(Note that a class is at the same time a superclass of itself as well as a subclass of itself.)</p>
      <p> For example, the following executes a query and returns a list of matches:</p>
        <p style="font-family:'Courier New', Courier, monospace;">OWLOntology desiredService = OwlsUtils.parseURI(desiredServiceURI);<br />
          Collection&lt;Match&gt; matches = matchMaker.match(<br />
  <img class="tab" src="images/spacer.gif" /> desiredService,<br />
  <img class="tab" src="images/spacer.gif" /> InputMatcher.SUPERCLASSES,<br />
  <img class="tab" src="images/spacer.gif" /> OutputMatcher.SUBCLASSES);</p>
        <p>The matched services are going to have the same or more specific outputs than requested (due to OutputMatcher.SUBCLASSES) and the same or more general inputs (due to InputMatcher.SUPERCLASSES). All requested outputs must be satisfied (by the matched service outputs), and all matched service inputs must be satisfied (by the query inputs), but not all query inputs or service outputs have to be used.</p>
      <p>Each match contains a reference to the query and to the matched service:</p>
        <p style="font-family:'Courier New', Courier, monospace;">for (Match match : matches) {<br />
          <img class="tab" src="images/spacer.gif" />ServiceDescriptor service = match.getService(); //the matched service<br />
          <img class="tab" src="images/spacer.gif" />System.out.println(&quot;Matched service: &quot; + service.getURI());<br />
          <img class="tab" src="images/spacer.gif" />System.out.println(&quot;&nbsp; Inputs: &quot; + service.getInputs());<br />
          <img class="tab" src="images/spacer.gif" />System.out.println(&quot;&nbsp; Outputs: &quot; + service.getOutputs());<br />
      }</p>
        <p>We did not use InputMatcher.SUPERCLASSES, OutputMatcher.SUBCLASSES in the example above at random. Choosing services with subclass outputs and superclass inputs effectively chooses services which can substitute the requested service (query), in the sense of Liskov's Substitution Principle. In other words, if a service fails, and you want to replace it with another, you can ask the matchmaker to find matches for the failed service, with the same InputMatcher and OutputMatcher as the example, and the matchmaker gives you back replacements which you are guaranteed to be able to invoke and consume. Since you were supplying some inputs to the failed service, and the replacement (matched) service only contain inputs which are superclasses of the failed service inputs, this means that the replacement service will accept the same inputs of the failed service. In a similar fashion, since you were consuming the failed service's outputs (and for example storing them in variables of the appropriate type), the replacement service will replace each output with some output which is a subclass, so your consumers are already prepared for such an output (if a consumer is ready to handle values in set A, it is ready to handle values in any subset of A too).<br />
          For a visual example (using a simple graphical tool we developed to make more apparent how the matchmaker works), consider the following simple ontology (showing “is a” relationships), regarding cities and weather:</p>
      <center><img src="images/matchmaker1.png" /></center>
          <p>Using concepts of this ontology, assume we have these services (<em>s1</em> to <em>s7</em>) registered in the matchmaker: </p>
      <center><img src="images/matchmaker2.png"  /></center>
          <p>Each line represents a service, for example <em>s4</em> is a service that accepts as input a French city, and returns the temperature and humidity levels of that city, and so on.</p>
          <p> Lets search for service we could use to ask the weather of a German city. The query signature would look like this:</p>
      <center><img src="images/matchmaker3.png"  /></center>
          <p>Performing this query (seeking services that accept GermanCity or superclasses, and produce Weather or subclasses) yields three results (in no particular order):</p>
          <center><img src="images/matchmaker4.png" /></center>
          <p>In the following diagram we graphically show the first matched service (<em>s3</em>) on the ontology, to make apparent why it matched. In ellipses, the classes of the query are shown (GermanCity, Weather). The classes of the matches are shown with jagged border lines. Note that for inputs, the matched service also needs GermanCity, which is a superclass of itself, and it produces a Temperature output, which is an output of Weather.</p>
<center><img src="images/matchmaker5.png" /></center>
          <p>In the end of the following section we will return to this simple example to show the effects of ranking the matched services through preferences.</p>
<h4>Ranking / Preferences</h4>
      <p>The matchmaker itself returns the matches in no particular order. This section shows how to impose an order on the results so to select the best (as many as required) of them.</p>
        <p> Conceptually, the process is very simple: define a preference (possibly beforehand), and use it to find the best matches. A preference is a binary relation, closely resembling a partial order. In particular, it is the union of a partial order and an equivalence relation, i.e., a preorder -- a reflexive, transitive relation, denoted by &gt;= (&quot;greater or equal&quot;).</p>
        <p> This notation: a &gt;= b, means that &quot;a&quot; is at least as preferable to &quot;b&quot;. Transitivety requires that if a &gt;= b and b &gt;= c, then a &gt;= c too. Reflexivity requires that a &gt;= a always is the case. We make no other assumption on the preference relation.</p>
      <p> Given a preference relation, we can find the <em>k </em>(k=5 in the example) best elements of a collection. For example:</p>
        <p style="font-family:'Courier New', Courier, monospace;">Preference&lt;Match&gt; preference = ...;<br />
      Collection&lt;Match&gt; matches = matchMaker.match(...);<br />
      List&lt;List&lt;Match&gt;&gt; blocks = preference.topElements(matches, 5);<br />
          for (List&lt;Match&gt; block : blocks) {<br />
  <img class="tab" src="images/spacer.gif" /> System.out.println(&quot;Matches of the next best block: &quot; + block);<br />
      }</p>
      <p> We see here that the preference creates a list of blocks of matches, starting with the block of the best (according to our preference) matches, moving down to blocks with less preferable matches, until we have gathered as many as we required (or all). If we don't care about the distinction of blocks, but want to create a flat representation of the results, we can simply do the following:</p>
      <p style="font-family: 'Courier New', Courier, monospace;"> Iterable&lt;Match&gt; flatResults = Iterables.concat(blocks); //com.google.common.collect.Iterables</p>
      <p> The problem then, of course, is how to construct a Preference&lt;Match&gt; object that expresses our actual preferences.</p>
      <p> To illustrate of what is possible with the provided preferences framework, we will go through a substantial example. In this example, our aim is to express three preferences:</p>
      <p> pS: “<em>We prefer service of which the textual description</em> (remember: OWL-S services can include a natural language description of the service) <em>matches more closely the textual description of the query</em> (the query is still OWL-S, so the user can add a natural language description of the desired service)”</p>
      <p> pR: “<em>We prefer services with higher reliability</em> (a typical quality of service notion)”</p>
      <p> pI: “<em>We prefer services with inputs that as specific as possible</em> (i.e. we prefer a subclass from a superclass for an input parameter type)”</p>
      <p> Still though, these are three preferences, pS, pR, pI, but we really want one, the combination of these. In particular, lets say we are interested in the following combination:</p>
      <p> “<em>Our pI preference is as important as pR, and pS is less important than the others</em>”.</p>
      <p> We could succinctly write this like (pI ~ pR) &gt; pS, where &quot;~&quot; operator denotes &quot;equal importance&quot;, and the &quot;&gt;&quot; operator prioritises the preference on the left over the one on the rigth.<br />
      We will work backwards. We will first assume that we already specified pI, pR, pS, and combine them, and only then we will show how to actually specify them.</p>
      <p style="font-family:'Courier New', Courier, monospace;">Preference&lt;Match&gt; pI = ...;<br />
        Preference&lt;Match&gt; pR = ...;<br />
      Preference&lt;Match&gt; pS = ...;</p>
      <p>To express our final preference (honouring our relative preference for these), we write:</p>
        <p style="font-family: 'Courier New', Courier, monospace;"> Preference&lt;Match&gt; pref =<br />
          &nbsp;Preference.consensus(pI, pR).preferredTo(pS);</p>
        <p> With this, we have combined our simpler preferences to a composite one that models our preferences. We can select the best matches using this preference, as shown earlier.</p>
      <p> Now, lets work through defining each of the pI, pR, pS preferences. pI is easy to get, since it is offered out of the box.</p>
        <p style="font-family:'Courier New', Courier, monospace;"> Preference&lt;Match&gt; pI = Preferences.ParamSpecialization.inputs(<br />
      matchMaker.getSubsumption());</p>
      <p>Note that we pass the subsumption relation of classes as maintained by the matchmaker (which happens automatically by incorporating the various ontologies that are used to describe registered services), because only if we have a subsumption relation we can talk about &quot;preferring subclasses over superclasses&quot;. Also note that if we wanted the opposite, i.e. preferring superclasses over subclasses, we would simply append a .reverse() in our expression. There are many others prebuilt preferences, for details see the Preferences class.</p>
        <p> For the reliability preference, pR (preference on higher reliability) we have more work to do. The framework is completely agnostic of such a &quot;reliability&quot; concept. There are many ways to model it, and many ways to store it (e.g. in a database, in the file system, or simply in memory) -- you are the one who chooses your architecture. For our purposes, we assume we maintain such a map:</p>
      <p style="font-family: 'Courier New', Courier, monospace;">final Map&lt;URI, Integer&gt; reliabilityScores = ...;</p>
        <p>Where the key is the service's URI, and the value is a reliability score, lets say in the [1..5] range, with 5 being the best. In a realistic scenario, this would be updated at runtime by incorporating runtime statistics of invoking the services, so that if a service fails often, it would have a low score.</p>
        <p> In effect, for pR, we prefer services which are associated (via reliabilityScores) with larger integers. Lets try to model that. This expression simply says we prefer smaller integers:</p>
        <p style="font-family: 'Courier New', Courier, monospace;">Preference&lt;Integer&gt; p = Preference.natural();</p>
        <p>This is because the natural order of integers are &quot;smaller first&quot;. This says we prefer larger numbers instead:</p>
        <p style="font-family: 'Courier New', Courier, monospace;">Preference&lt;Integer&gt; p = Preference.natural().reverse();</p>
      <p>We can turn this to a Preference&lt;Match&gt; if we can provide a function from Match to Integer, like this:</p>
        <p style="font-family: 'Courier New', Courier, monospace;">Preference&lt;Match&gt; pR = Preference.natural().reverse()<br />
          .onResultOf(new Function&lt;Match, Integer&gt;() {<br />
  <img class="tab" src="images/spacer.gif" /> public Integer apply(Match match) {<br />
  <img class="tab" src="images/spacer.gif" /><img class="tab" src="images/spacer.gif" /> return reliabilityScores.get(match.getService().getURI());<br />
  <img class="tab" src="images/spacer.gif" /> }<br />
      });</p>
        <p>That is the whole definition of pR, now we can include reliability in our preferences. </p>
        <p> For the textual similarity preference, pS, we do have support from the matchmaker. To answer textual similarity queries, we have to maintain extra data structures, for example to store how many times a term (word) appeared in a particular service description (note that the matchmaker, due to memory considerations, does not retain the whole OWL-S representation of the service after its registration, only its signature, and the textual similarity is just a part of the OWL-S representation). So we can't suddenly decide to answer such queries to do ranking, we have to anticipate them and prepare accordingly. Apart from textual similarities, there are many other scenarios that the user would like to process the OWL-S description of a service and retain extra information, to be used later (for ranking, in our case).</p>
        <p> In such scenarios, MatchDecorators come into play. A MatchDecorator is an interface that can be implemented by the user and registered with a MatchMaker instance upon instantiation of the latter. Then, the MatchDecorator watches every registered/deregistered service, and it is free to maintain any data structure it wants. Furthermore (and that is the MatchDecorator key ability), it can decorate each produced Match with additional key-value entries.</p>
      <p> In our example, we need to construct our matchmaker as following:</p>
        <p style="font-family: 'Courier New', Courier, monospace;">MatchMaker matchMaker = new MatchMaker(<br />
          new Preferences.DescriptionSimilarityDecorator());</p>
        <p> DescriptionSimilarityDecorator will make sure that we will be able to access textual similarity scores if we desire so. Note, though, that computing such decorations for each match can be expensive, for example a MatchDecorator could be using a database of statistics to compute the decorations it creates, so if we do have an expensive MatchDecorator, we do not want to let it do its thing unless we are planning to use its results. This is done via an overloaded method match of the MatchMaker, which accepts a Predicate, which specifies whether we are interested in a particular decoration. Then, after the matchmaker produces the matches for a given query, it goes through the registered MatchDecorators and asks them whether they produce a decoration that is interesting to us. In that case, it invokes them, so the matches get those interesting decorations. If we don't specify a predicate, then all decorations are deemed interesting - in other words, all registered MatchDecorators are invoked (so the predicate is merely offerring an optimization).</p>
        <p> DescriptionSimilarityDecorator in particular creates decorations with TextualSimilarity keys. So, we could append such a predicate to our match() queries:</p>
        <p style="font-family: 'Courier New', Courier, monospace;">Predicates.instanceOf(TextualSimilarity.class)</p>
        <p>Or we can skip it, if we don't mind running all the MatchDecorators we configured.</p>
      <p>While this rather complicated walk-through touched lots of aspects of the matchmaker design, using textual similarities is not complicated. To summarise, this is all we have to do:</p>
        <ul type="disc">
          <li>Make sure we instantiate our      matchmaker by adding new Preferences.DescriptionSimilarityDecorator() in      its constructor.</li>
          <li>Either use the plain match()      method, or provide a predicate that accepts decoration keys of type      Preferences.TextualSimilarity.        </li>
      </ul>
        <p>We can now define the textual similarity preference, pS, as follows:</p>
        <p style="font-family: 'Courier New', Courier, monospace;">Preference&lt;Match&gt; pS = new TextualSimilarity(<br />
        TextType.DESCRIPTION, Similarity.COSINE).preference();</p>
      <p>Note we used the &quot;cosine&quot; similarity measures; there are others to choose from as well. Also, it is useful to show how we would define such a preference without direct from the library (like the useful preference() method used above). Assuming that higher scores are preferable (as it is the case in textual similarity scores), we could also do this, to the same effect:</p>
        <p style="font-family: 'Courier New', Courier, monospace;">final TextualSimilarity key = new <br />
          TextualSimilarity(TextType.DESCRIPTION, Similarity.COSINE);<br />
          Preference&lt;Match&gt; pS = Preference.&lt;Double&gt;natural().reverse()<br />
          .onResultOf(new Function&lt;Match, Double&gt;() {<br />
  <img class="tab" src="images/spacer.gif" /> public Double apply(Match match) {<br />
  <img class="tab" src="images/spacer.gif" /><img class="tab" src="images/spacer.gif" />&nbsp; return match.getDecoration(key);<br />
  <img class="tab" src="images/spacer.gif" /> }<br />
      });</p>
        <p>We already saw possible ways to combine these preferences earlier in this section.</p>
        <p> Further information can be found in the javadocs of Preference/Preferences classes; the latter also contain several MatchDecorator implementations. Each implementation describes, apart from the semantics of the produced decorations, under which keys are the decorations added, which can be used to define preferences.</p>
        <p> It should be noted that while preferences can express things which scoring functions cannot (e.g. partial orders vs total orders), you should note that it is very easy to use a scoring function if so you wish. The framework offers no specific support for that, because it already very easy to implement. For example, one could start by match decorations and aggregate them into a single score, and perform a simple ranking (i.e. sorting) based on that score. Or use such a score to define a preference on it, and combine it with other preferences, and so on.</p>
        <p> Finally, let’s see graphically the effects of some simple preferences.</p>
        <p>Recall that in the previous section we performed this query:</p>
        <center><img src="images/matchmaker3.png" /></center>
        <p>and got back these matches:</p>
      <center><img src="images/matchmaker4.png" /></center>
        <p>Lets show graphically these matches side by side. Please pay attention to the classes marked with jagged borders; these represent the classes of each match, and we remind that with ellipses we show the classes of the query:</p>
<center><table>
        			<tr><td><img src="images/matchmaker6.png" /></td></tr>
                    <tr><td style="text-align:center; font-weight: bold; font-size:11px;">S3: GermanCity => Temperature</td></tr>
                    <tr><td><img src="images/matchmaker7.png" /></td></tr>
                    <tr><td style="text-align:center; font-weight: bold; font-size:11px;">S2: City => Weather</td></tr>
                    <tr><td><img src="images/matchmaker8.png" /></td></tr>
                    <tr><td style="text-align:center; font-weight: bold; font-size:11px;">S1: Region => Weather</td></tr>
                 </table></center>
        <p>We will now go through the results of ranking these three matches via various preferences. The results in each case is an ordered list of <em>blocks</em> of answers, written as [ <em>block1</em> ], [ <em>block2</em>] etc., where the first block contains the best answers, the second block contains the second best, etc. (no service appears in two blocks). The meaning of these blocks is twofold: (a) any service in a subsequent block is <em>less preferred</em> to any service of an predecessor block, and (b) the given preference does not prefer any service in a block more than any other service of the block; e.g. they are either equally compared / incomparable between them. </p>
        <ul type="disc">
          <li><strong>Preference: “Exact inputs”:</strong><br />
            <strong>Code: <br />
            </strong>Preference&lt;Match&gt; preference =&nbsp; Preferences.ParamExactness.INPUTS.preference();
            <br />
            <strong>Meaning: </strong>“We prefer those      services that declare as many of the <em>inputs</em> queried”
            <br />
            <strong>Results: </strong>[ S3 ], [ S1&nbsp; S2 ]<strong><br />
              Explanation: </strong>S3 is the only one declaring an exactly matching input      (GermanCity), so is clearly preferred to the rest. The others have zero      exactly matching input, so they are equivalent from the perspective of      this preference.<br />
          </li>
          <li><strong>Preference: “Exact outputs”<br />
            Code: <br />
            </strong>Preference&lt;Match&gt; preference =&nbsp;      Preferences.ParamExactness.OUTPUTS.preference();<br />
            <strong>Meaning: </strong>“We prefer those      services that declare as many of the <em>outputs</em> queried”<br />
            <strong>Results: </strong>[ S1 S2], [ S3 ]<strong><br />
              Explanation: </strong>S1 and S2 declare an exactly matching output (Weather),      so either of them is preferable to S3, which does not declare an exact      output. We have no particular preference between S1 and S2.<br />
          </li>
          <li><strong>Preference: “Exact inputs and (equally important) exact      outputs”<br />
            Code: <br />
            </strong>Preference&lt;Match&gt; preference =&nbsp; Preferences.consensus(<br />
            <img class="tab" src="images/spacer.gif" /><img class="tab" src="images/spacer.gif" />&nbsp;&nbsp;      Preferences.ParamExactness.INPUTS.preference(),<br />
            <img class="tab" src="images/spacer.gif" /><img class="tab" src="images/spacer.gif" />&nbsp;      &nbsp;Preferences.ParamExactness.OUTPUTS.preference());<br />
            <strong>Meaning: </strong>“We prefer those      services that declare as many inputs of the inputs queried and as many      outputs of the outputs queried”. Note that if a service has more exact      inputs than another, but the other has more exact outputs, we cannot      decide which is preferred, because we treat these preferences equally      important (this would not be the case e.g. if we declared that one of      these preferences was more important than the other).<br />
            <strong>Results: </strong>[ S1 S2 S3 ]<strong><br />
              Explanation: </strong>It turns out that all services are incomparable with this      criterion. For example, S1 has an exact output (Weather) whereas S3 does      not have any, but S3 has an exact input (GermanCity) whereas S1 does not      have. S1 and S2 have both an exact output (Weather), and an inexact input      (Region and City respectively), so they are considered equivalent.<br />
          </li>
          <li><strong>Preference: “More specialised inputs”<br />
            Code: <br />
            </strong>Preference&lt;Match&gt; preference =&nbsp; <br />
            <img class="tab" src="images/spacer.gif" /><img class="tab" src="images/spacer.gif" />&nbsp;&nbsp;      Preferences.ParamSpecialization.inputs(matchmaker.getSubsumption());<br />
            <strong>Meaning: </strong>“We prefer services      that declare more specialised inputs, e.g., we prefer subclasses to      superclasses as inputs”.<br />
            <strong>Results: </strong>[ S3 ] [S2 ] [ S1 ]<strong><br />
              Explanation: </strong>S3 takes an input of GermanCity, S2 takes City, and S1      takes Region. GermanCity is a subclass of City, so S3 is preferred to S2,      and City is a subclass of Region, so S2 is preferred to S1.<br />
          </li>
          <li><strong>Preference: “More specialised outputs”<br />
            Code: <br />
            </strong>Preference&lt;Match&gt; preference =&nbsp; <br />
            <img class="tab" src="images/spacer.gif" /><img class="tab" src="images/spacer.gif" />&nbsp;&nbsp;      Preferences.ParamSpecialization.outputs(matchmaker.getSubsumption());<br />
            <strong>Meaning: </strong>“We prefer services      that declare more specialised outputs, e.g., we prefer subclasses to      superclasses as outputs”.<br />
            <strong>Results: </strong>[ S3 ] [ S1 S2 ]<strong><br />
          Explanation: </strong>S3 produce the output of Temperature, while S1 and S2      produce Weather. Temperature is a subclass of Weather, so S3 is preferred      to either S1 or S2.</li>
          <li><strong>Preference: “More specialised inputs and (equally important) more specialised outputs”<br />
 Code: <br />
          </strong>Preference&lt;Match&gt; preference =&nbsp; Preferences.consensus(<br />
<img class="tab" src="images/spacer.gif" /><img class="tab" src="images/spacer.gif" />&nbsp;&nbsp; Preferences.ParamSpecialization.inputs(matchmaker.getSubsumption()),<br />
<img class="tab" src="images/spacer.gif" /><img class="tab" src="images/spacer.gif" />&nbsp;&nbsp; Preferences.ParamSpecialization.outputs(matchmaker.getSubsumption()));<br />
<strong>Meaning: </strong>“We prefer services that declare more specialised inputs and more specialised outputs, e.g., we prefer subclasses to superclasses as inputs or outputs”.<br />
<strong>Results: </strong>[ S3 ] [S2 ] [ S1 ]<br />
<strong> Explanation: </strong>S3 is clearly preferred to S2 because S2 is City=&gt;Weather while S3 is GermanCity=&gt;Temperature, and GermanCity is a subclass of City plus Temperature is a subclass of Weather. On the other hand, S2 is preferred to S1 because, while they both declare the same output (Weather), S2 declares the more specific input of City, while S1 declares Region, and City is a subclass of Region, so S2 is as good as S1 for outputs, but better than S1 in inputs, so is better overall.</li>
        </ul>
      <h3>Best Practices (do)</h3>
        <ul>
          <li>Use fine-grained ontologies / class hierarchies with which you can capture the semantics of the services inputs/outputs as precisely as possible. </li>
          <li>Think about the relative importance of your various partial preferences are, and combine them accordingly. </li>
          <li>Ask for InputMatcher.SUPERCLASSES and OutputMatcher.SUBCLASSES (i.e., a matched service should accept the same or more general inputs, and produce the same or more specific outputs) if you search for a service that can be used as a drop-in replacement for another service (that perhaps has failed).</li>
          <li>(Inversely) ask for InputMatcher.SUBCLASSES and OutputMatcher.SUPERCLASSES (i.e., a matched service should accept the same or more specific inputs, and produce the same or more general outputs) to find which services can be replaced (e.g. if they fail at some point) via a specific service (the query). </li>
        </ul>
        <h3>Bad Practices (don't)</h3>
        <ul>
          <li>Do not query for services without requesting any particular output; the matchmaker will dutifully find services that can be invoked with your inputs (or any subset of them), but create entirely arbitrary results. </li>
          <li>In the same sense, do not register services that declare no formal output. Even if the actual service might produce no output, but is only invoked for its side-effects, create a class in your ontology that captures the semantics of these side-effects, so you can ask the matchmaker “find me services that have these particular side-effects”.</li>
          <li>Do not declare a preference that is based on a real-valued score on matches as more important as some other preference, because the latter preference would take effect <em>only</em> if two services had the exact same real-value score, so they would tie in the first preference, which might be very unlikely and perhaps not what you want. </li>
        </ul>
        <h3>Inter-dependencies      </h3>
      <h3>Errors  </h3>
  </div>
    <br />
    <div style="float:right; margin-right:10%;">Next: <a href="http://org.eclipse.ui.intro/showPage?id=servicesetup">Service Setup</a></div>
</div>

<div id="logo">
	<img src="images/alive_logo.jpg" border="0" />
</div>
</body>
</html>
