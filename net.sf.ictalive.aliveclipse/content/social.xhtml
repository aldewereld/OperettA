<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Overview</title>
  <link rel="stylesheet" href="shared.css" type="text/css" />	
  </head>

<body>
<div class="menu">
	<div class="tooltipy" style="margin-top:10px;"><a href="http://org.eclipse.ui.intro/showPage?id=overview"><img src="images/yellow.png" height="24" width="24" border="0" /><span class="yellow" style="font-size:9px;">Overview</span></a></div>
    <div class="tooltip" style="margin-top:30px;"><a href="http://org.eclipse.ui.intro/showPage?id=tutorials"><img src="images/red.png" height="24" width="24" border="0" /><span style="font-size:9px;">Tutorials</span></a></div>
    <div class="tooltip" style="margin-left:-10px;"><a href="http://org.eclipse.ui.intro/showPage?id=methodology"><img src="images/green.png" width="24" height="24" border="0" /><span style="font-size:9px;">Methodology</span></a></div>
    <div class="tooltip" style="margin-left:50px;"><a href="http://org.eclipse.ui.intro/showPage?id=organisation"><img src="images/left.png" width="24" height="24" border="0" /><span style="font-size:9px;">Previous</span></a></div>
    <div class="tooltipup"><a href="http://org.eclipse.ui.intro/showPage?id=organisation"><img src="images/up.png" width="24" height="24" border="0" /><span style="font-size:9px;">Up</span></a></div>
    <div class="tooltip"><a href="http://org.eclipse.ui.intro/showPage?id=interactionstructure"><img src="images/right.png" width="24" height="24" border="0" /><span style="font-size:9px;">Next</span></a></div>
    <div class="tooltip" style="margin-left:50px;"><a href="http://org.eclipse.ui.intro/close"><img src="images/workspace.png" width="24" height="24" border="0" /><span style="font-size:9px;">Go to workbench</span></a></div>
</div>

<div class="bg">
<img id="background-img" src="images/alive_background.jpg" class="bg" />
</div>

<div class="page-style">
    <div id="content"> 	
        <h2>Social Structure</h2>
        <p>The social structure of an organisation describes the roles and the relations between those roles in the organisation. It defines the breakdown of 'responsibilities' towards the achievement of the organisational objective in terms of important parties (roles) and how these roles should interact to achieve the objective (dependencies).</p>
        <h3>Creating Roles</h3>
        <p>The easiest way to create a social structure is via the diagram editor. Click the tab with 'SS Diagram' on it to show the editor. You will get a blank screen with a Palette on the right side of it. This palette contains the concepts of the social structure, namely the roles and the different types dependencies between the roles. Click on 'Role' in the palette and move your mouse over to a location on the diagram. By clicking in the diagram you create a role, and are requested to type a name for the Role. We name it 'Interface'. As soon as you press 'Return' after typing the name, the properties of that Role will be updated. Note that not only the &quot;Name&quot; field is filled, but that also the &quot;Concept&quot; field now has a value. Concepts (in the ontology) are automatically created while you are designing your organisation. Concepts can also be used for naming several aspects of your organisation, like roles. We get back to using the ontology and naming elements via an imported ontology later on.</p>
        <p> Let's create a second role named 'ContentAdaptor'.</p>
        <center><img style="margin-bottom:10px;" src="images/newRole.png" /></center>
      <h3>Creating Objectives</h3>
      <p>We now have an organisation with two internal <a class="info">roles<sup>1</sup><span><sup>1</sup> Roles are by default created as 'internal', which means that they will be enacted in the implementation by agents that we create/generate ourselves. Roles can be set to 'external' to indicate that an agent 'outside' your control (that is, created by a third-party) can enact that role, by setting the 'Role Type' property to 'Ext'. To show the difference between internal and external roles, the role icons are labelled with &quot;In&quot; or &quot;Ex&quot; respectively.</span></a>. The roles need to have a purpose for being in the organisation; that is, they need to have a description of why they are important in the organisation. This is done via objectives. Objectives describe the states that should be reached by a role. Through the use of dependencies (discussed below) and objectives, the social structure thus gives a description of how the roles are to participate/interact to achieve an overall 'goal'.</p>
        <p> In our small scenario, the ContentAdaptor is responsible for achieving various objectives, like assessing the context in which the user is accessing the information display, gathering the information to be provided to the user, gathering the user preferences, personalising the content that is being provided, etc. Let us model the first one here.</p>
        <p> Click the ContentAdaptor role figure to select it. Open the 'Manage Objectives' tab in the left-hand-side of the Properties view and click on 'Add objective'.</p>
      <center><img src="images/objectives.png" /></center>
        <p>Select the new objective in the list on the right (it will be called &quot;undefined&quot;) and type a name in the &quot;Name&quot; field on the left-hand-side. Name it &quot;GatherUserContext&quot;.</p>
<center><img src="images/objectiveProperties.png" /></center>
      <p>If you forgot to select the role before adding the objective, it will not be allocated to the proper role (the 'Used By Role' field will be empty) and will have to be allocated manually. Let's try this as well.</p>
        <p> Make sure you have no role selected in the diagram (you can achieve this by clicking anywhere outside the roles in the diagram). Go to the 'Manage Objectives' tab in the Properties view and click 'Add objective'. You can verify that your new &quot;undefined&quot; objective is not attached to a role by checking the 'Used By Role' field (it should be empty now). Let's name this objective &quot;ShowContent&quot;.</p>
        <p> This objective is to be attached to the role &quot;Interface&quot;, to indicate that the interface is responsible for showing the content (derived by the rest of the system) to the user. Select the &quot;Interface&quot; role by clicking on its role icon in the diagram. Click the &quot;Objectives&quot; field in the properties, and click on the button with &quot;…&quot; on it on the far left of that field. This shows the Objectives Selector. The Objectives on the left are all the objectives in the organisation, the list on the right are the objectives attached to this role. Make sure that the &quot;ShowContent&quot; objective appears in the right list by either double-clicking it in the left list, or selecting it in the left list and clicking &quot;Add&quot;. Click &quot;Ok&quot; to confirm. The &quot;Objectives&quot; field of the &quot;Interface&quot; role now shows that it has an objective &quot;ShowContent&quot;. </p>
        <p> Next we add some sub-objectives. Sub-objectives are child-elements of an objective to indicate that that objective can be split into several smaller pieces. These smaller pieces can be delegate to others (see dependencies below) or an ordering can be set on their achievement. The &quot;GatherUserContext&quot; has two sub-objectives, namely &quot;GetDateTime&quot; and &quot;GetUserLocation&quot;. We will use two separate ways of adding these to the &quot;GatherUserContext&quot; objective.</p>
        <p> First, we add it directly through the &quot;Manage Objectives&quot; interface. Select the &quot;GatherUserContext&quot; objective in the list, and click the 'Add subObjective' button. An &quot;undefined&quot; objective is being added underneath the &quot;GatherUserContext&quot; objective in the list. Select the &quot;undefined&quot; objective and give it the name &quot;GetDateTime&quot;.</p>
        <p>Sometime you will want to assign an already created objective as a sub-objective of another objective. We will do this now with the second sub-objective of &quot;GatherUserContext&quot;. First, we create a new objective called &quot;GetUserLocation&quot; by clicking the 'Add objective' button (make sure no role is selected, or the new objective gets assigned to that role). </p>
      <center><img src="images/subObjective.png" /></center>
        <p>Next we will add this objective as a sub-objective of &quot;GatherUserContext&quot;. Select &quot;GatherUserContext&quot; in the list, select the 'Sub Objectives' property field and click the button with &quot;…&quot; on the far right of that field. We get a selection window similar to the one we saw earlier. Select the &quot;GetUserLocation&quot; in the left list, and add it to the right list before closing the window by clicking 'Ok'.</p>
      <center><img src="images/assignSubObj.png" /></center>
        <p>As an objective is a description of the state that is supposed to be achieved by a role, it requires a (logical) description of what that state actually means. The name we gave to the objective gives us some information about what that objective actually means, but to make sure that the system will 'know' as well, we need to attach formal semantics. This achieved by filling the 'State Description' property of the objective. Every objective should have a state description in order to be used by the ALIVE system.</p>
        <p>Attaching a state description to an objective is easy, you select one from the drop-down list in the 'State Description' field. However, there are no state descriptions in our model yet. The creation of state descriptions is detailed in a section below. </p>
      <h3>Creating Dependencies</h3>
      <p>Our simple organisation specifies no interaction between the two roles present. The roles have their own objectives, but the interactions between the roles have not been specified. Typically roles depend on each other for the completion of their objectives. They need to interact to achieve the complex objectives assigned to them. These interaction needs are specified by means of dependencies.</p>
        <p> There are three different types of dependencies. </p>
        <ul style="margin-top:5px;">
          <li>Hierarchical dependencies: these work like delegations; the dependee role is obliged to achieve the objective being assigned to it via this dependency; </li>
          <li>Market dependencies: these act like bidding or auction relations, a 'call for proposals' is done towards the dependees, which each propose a 'bid' for achieving that objective, and the dependant can then choose whom it will allow to fulfil the objective;</li>
          <li>Network dependencies: in this case the roles related are considered 'equals' with respect of the objective, and have to coordinate among them to achieve it.</li>
      </ul>
        <p>Dependencies are always specified towards a specific objective. This objective is delegated to (hierarchical), petitioned for (market) or coordinated with (network) the other role attached to the dependency. The former two dependency types have a <a class="info">direction<sup>2</sup><span><sup>2</sup> The role initiating the dependency (or superior) is called Dependant (i.e., that role depends on the other role to fulfil the objective). The undergoing role (or subordinate) is called Dependee (i.e., the role that is being depended on to fulfil the objective).</span></a>; network dependencies are considered bi-directional.</p>
        <p> A dependency between roles is easily created in the social diagram editor via the dependency tools on the palette. All three dependencies are represented as a button. Let's create a hierarchical dependency between our two roles. Click the 'HierarchyDependency&quot; button on the palette. Click the &quot;ContentAdaptor&quot; role in the diagram and drag towards the &quot;Interface&quot; role to create the dependency.</p>
      <center><img src="images/dependency.png" /></center>
        <p>Next we have to attach an objective to the dependency to indicate why &quot;ContentAdaptor&quot; depends on &quot;Interface&quot;. Click the arrow we just created, select the &quot;Object Of Dependency&quot; property field, and click the button with &quot;…&quot; on the far right of that field. The list on the left gives an overview of all the objectives attached to &quot;ContentAdaptor&quot;. Note that it includes all of the sub-objectives of its objectives as well. Select the objective(s) that are attached to this dependency in the left list and add them to the list on the right. In our case, these are &quot;GetUserLocation&quot; and &quot;GetDateTime&quot;. Click 'Ok' to confirm. The label in the diagram will update after saving or reloading your model.</p>
        <center><table><tr><td><img src="images/ss.png" /></td></tr><tr><td style="text-align:center; font-weight: bold; font-size:11px;">Figure 2. Complex Social Structure</td></tr></table></center>
        <h3>Best Practices</h3>
        <p>Concerning the general practice of designing an organisation:</p>
        <ol style="margin-top:5px;">
          <li>Start the design process by identifying the (functional) requirements of the domain. This means an analysis of the global functionalities and objectives of the society.</li>
          <li>Next identify the stakeholders. The analysis of their objectives identifies the operational roles in the society. These two first steps set the basis of the Social Structure.</li>
          <li>Set social norms, define normative expectations: The analysis of the requirements and characteristics of the domain is required for the specification of the normative characteristcs of the society. These are represented in the norms in the normative structure (see <a href="http://org.eclipse.ui.intro/showPage?id=normativestructure">this section</a> for details on creating norms).</li>
          <li>Refine behaviour: Using means-end and contribution analysis, a match can be made between what roles should provide and what roles can provide. This aspect contributes to the refinement of role objectives and rights.</li>
          <li>Create interaction scripts: Using the results from steps 3 and 4, one can now specify the patterns of interaction for the organisation, resulting in the interaction structure (see the next section for details on creating interaction structures).</li>
        </ol>
        <p>General concerns when creating the social structure:</p>
        <ul style="margin-top:5px;">
          <li>When designing objectives and sub-objectives, remember that over-specifying the domain leaves little 'freedom' to the Coordination Level in terms of planning. That is, the Organisation Model objectives can be specified in extensive detail, specifying the smallest steps needed to be done to complete that objective (by using sub-objectives). In general, the more detail you put in the refinement of the objectives at the organisation level, the less freedom there is to plan around in different situations.</li>
          <li>The organisation level should use an 'organisation point of view', thus describing (i.e., at such a level of abstraction) only that which is important to the organisation. When creating roles and objectives, it is best to ask oneself whether the organisation should be concerned about those, or whether they are an agent issue. As a general example, becoming rich is a typical agent goal (thus out of scope of the organisation), while efficiency typically is an organisational objective (possibly imposed on the agents participating).</li>
          <li>Sub-objectives can be used to decompose objectives into smaller parts which can be out-sourced (or delegated) to other parties in the organisation. In essence, the entire process of creating the organisation is decomposing the organisational objectives (i.e., those objectives in which the organisation as a whole is interested in achieving) into smaller bits that can be delegated/out-sources to different participants in the organisation. </li>
          <li>Remember, if (sub-)objectives are delegated/out-sourced to others, the responsibility of  completion (or checking that it is completed) remains with the role that delegates the (sub-) objective. Typically, there will be some sort of interaction (in the interaction structure) related to both the delegation/out-sourcing and to the checking/reporting events needed.</li>
        </ul>
</div>
    <br />
    <div style="float:right; margin-right:10%;">Next: <a href="http://org.eclipse.ui.intro/showPage?id=interactionstructure">Interaction Structure</a></div>
</div>

<div id="logo">
	<img src="images/alive_logo.jpg" border="0" />
</div>
</body>
</html>
