import OM;

  /**
	* This file specifies the OCL constraints on the <code>OM</code> package. 
	* Constraints pertaining to the <code>opera</code> package instead
	* should be added to <file>opera.chk</file>
  	*/

//Old constraint to check whether the plug-in was working
//context OM WARNING "Falsum - test check (om)":false;

/** ROLES */

	/**
	  * Roles should have a name
	  */
context Role ERROR
	"Model contains unnamed Role or Role contains an empty name. Name Role, or remove it.":
	Name != null && Name != "";
	
//context Role WARNING
//	"Name of Role "+ Name +" should be longer than 3 characters.":
//	Name.length > 3;

	/**
	  * Roles should have at least one objective
	  */
context Role ERROR
	"Role " + Name + " does not have an objective.":
	objectives.size > 0;
	
	/**
	  * Role names should be unique
	  */
context Role ERROR
	"Conflicting Role names: " +Name+ " is not unique.":
	((SS)eContainer).roles.notExists(r | r.Name == this.Name && r != this);
	
	/**
	  * Roles should have a function in the organisation, i.e., there should be at least 1 player in a scene connected
	  * to this role.
	  */
context Role ERROR
	"The Role " +Name+ " is not enacted by any players in the interaction structure.":
	((OM)((SS)eContainer).eContainer).is.scenes.exists(sc | sc.players.exists(p | p.role == this));
	
	
	
/** OBJECTIVES */
	/**
	  * Objectives should have a name
	  */
context Objective ERROR
	"Model contains unnamed Objective or Objective contains an empty name. Name Objective, or remove it.":
	Name != null && Name != "";

	/**
	  * Objectives not used in the model are superfluous, a design mistake?
	  */
context  Objective WARNING
	"Objective " + Name + " is not used by any role.":
	usedByRole.size > 0;

	/**
	  * Objectives should have a PartialStateDescription
	  */
context Objective ERROR
	"Objective " +Name+ " does not have a state description.":
	stateDescription != null;
	
	/**
	  * Objective names should be unique.
	  */
context Objective ERROR
	"Conflicting Objective names: " +Name+ " is not unique.":
	((SS)eContainer).objectives.notExists(o | o.Name == this.Name && o != this);
	
	/**
	  * Leaf-Objectives should be achieved in the Interaction Structure (by entails relation of landmarks)
	  */
context Objective ERROR
	"The objective " + Name + " is not achieved anywhere in the Interaction Structure.":
	subObjectives == null ? ((OM)((SS)eContainer).eContainer).is.scenes.exists(sc | sc.interactionPattern.landmarks.exists(l | l.entails.contains(this))) : true;
	
	
	
/** DEPENDENCIES */
	/**
	  * Unconnected Roles could be a modelling fault
	  */
context Role WARNING
	"Unconnected Role: " + Name + ". The role is not dependent on other roles and no other role depends on it.":
	((SS)eContainer).dependencies.typeSelect(HierarchyDependency).exists(dh | dh.Dependant == this || dh.Dependee == this) ||
	((SS)eContainer).dependencies.typeSelect(MarketDependency).exists(dm | dm.Dependant == this || dm.Dependee == this) ||
	((SS)eContainer).dependencies.typeSelect(NetworkDependency).exists(dn | dn.Dependant1 == this || dn.Dependant2 == this);
	
	/** 
	  * Dependencies should have both Dependant and Dependee (or Dependant2) filled.
	  */
context HierarchyDependency ERROR
	"Unconnected Dependency. HierarchyDependency needs a source Role (Dependant).":
	Dependant != null;
context HierarchyDependency ERROR
	"Unconnected Dependency. HierarchyDependency needs a target Role (Dependee).":
	Dependee != null;
context MarketDependency ERROR
	"Unconnected Dependency. MarketDependency needs a source Role (Dependant).":
	Dependant != null;
context MarketDependency ERROR
	"Unconnected Dependency. MarketDependency needs a target Role (Dependee).":
	Dependee != null;
context NetworkDependency ERROR
	"Unconnected Dependency. NetworkDependency needs a source and target Role.":
	Dependant1 != null && Dependant2 != null;
	
	/**
	  * Dependencies should have an objective.
	  */
context HierarchyDependency ERROR
	(Dependant != null && Dependee != null) ? "The Dependency between " + Dependant.Name + " and " + Dependee.Name + " is not defined; specify an Object of Dependency" : "The model contains a dependency for which no objective is defined.":
	ObjectOfDependency.size > 0;
context MarketDependency ERROR
	(Dependant != null && Dependee != null) ? "The Dependency between " + Dependant.Name + " and " + Dependee.Name + " is not defined; specify an Object of Dependency" : "The model contains a dependency for which no objective is defined.":
	ObjectOfDependency.size > 0;
context NetworkDependency ERROR
	(Dependant1 != null && Dependant2 != null) ? "The Dependency between " + Dependant1.Name + " and " + Dependant2.Name + " is not defined; specify an Object of Dependency" : "The model contains a dependency for which no objective is defined.":
	ObjectOfDependency.size > 0;
	
	
	
/** RIGHTS */
	/**
	  * Rights should have a name
	  */
context Right ERROR
	"Right of Role " + ((Role)eContainer).Name + " does not have a name.":
	Name != null;
	
	/**
	  * Rights should have a name
	  */
context Right ERROR
	"Right " + Name + " of Role " + ((Role)eContainer).Name + " does not have a state description.":
	Expr != null;
	
	
	
/** SCENES */
	/**
	  * Scenes should have a result
	  */
context Scene ERROR
	"Scene " +sceneID+ " does not have a result.":
	results != null;
	
	/**
	  * Scenes should have a landmark pattern
	  * (exception for start/end scene types?)
	  */
context Scene ERROR
	"Scene " +sceneID+ " does not have a landmark pattern.":
	interactionPattern != null || type == SceneType::Start || type == SceneType::End;
	
	/**
	  * Scenes should be connected to the rest of the IS
	  */
context Scene ERROR
	"Unconnected scene: " +sceneID+ " does not have any outgoing paths.":
	((IS)eContainer).arcs.typeSelect(SceneToTransitionArc).exists(a | a.from == this) || this.type == SceneType::End;
context Scene ERROR
	"Unconnected scene: " +sceneID+ " does not have any incoming paths.":
	((IS)eContainer).arcs.typeSelect(TransitionToSceneArc).exists(a | a.to == this) || this.type == SceneType::Start;
	  
	  /**
	  	* SceneIDs should be unique
	  	*/
context Scene ERROR
	"Conflicting Scene IDs: " + sceneID +" is not unique.":
	((IS)eContainer).scenes.notExists(s | s.sceneID == this.sceneID && s != this);
	  
	  
/** TRANSITIONS */
	/**
	  * Transitions should be connected to the rest of the IS
	  */
context Transition ERROR
	"Unconnected transition: " +transitionID+ " has no incoming arcs.":
	((IS)eContainer).arcs.typeSelect(SceneToTransitionArc).exists(a | a.to == this);
context Transition ERROR
	"Unconnected transition: " +transitionID+ " has no outgoing arcs.":
	((IS)eContainer).arcs.typeSelect(TransitionToSceneArc).exists(a | a.from == this);
	
	/**
	  * Transitions should have an unique ID
	  */
context Transition ERROR
	"Conflicting Transition IDs: " +transitionID+ " is not unique.":
	((IS)eContainer).transitions.notExists(t | t.transitionID == this.transitionID && t != this);
	
	/**
	  * Transitions should have transition norms attached to define the paths taken by the roles
	  */ /*
context Transition ERROR
	"Transition " +transitionID+ " has no transition norms set.":
	this.norms.size > 0;
	
	/**
	  * Transition Norms should be filled correctly
	  */
context TransitionNorm ERROR
	"TransitionNorm " +ID+ " should specify an originating Scene.":
	fromScene != null;
context TransitionNorm ERROR
	"TransitionNorm " +ID+ " should specify at least one originating Player.":
	fromPlayer.size > 0;
context TransitionNorm ERROR
	"TransitionNorm " +ID+ " should specify at least one Result of the originating Scene.":
	fromResults.size > 0;
context TransitionNorm ERROR
	"TransitionNorm " +ID+ " should specify a destination Scene.":
	toScene != null;
context TransitionNorm ERROR
	"TransitionNorm " +ID+ " should specify a destination Player.":
	toPlayer != null;	  
	
		
	/**TODO
	  * The scenes/players specified in the TN should match the scenes/players connected to the transition
	  */ /*
context TransitionNorm ERROR
	"TransitionNorm " +ID+ " attached to Transition " +attachedTo+ " has no access to Scene " +fromScene:
	(fromScene != null && attachedTo != null)? 
	((IS)((Transition)attachedTo).eContainer).arcs.exists(arc | arc.to == attachedTo && arc.from == fromScene);
context TransitionNorm ERROR
	"TransitionNorm " +ID+ " attached to Transition " +attachedTo+ " has no access to Scene " +toScene:
	(fromScene != null && attachedTo != null)?
	((IS)((Transition)attachedTo).eContainer).arcs.exists(arc | arc.from == attachedTo && arc.to == toScene);
context TransitionNorm ERROR
	"There exists no Player " +fromPlayer+ " in scene " +fromScene+ " as used by Transition Norm " +ID:
	(fromPlayer != null && fromScene != null)? fromScene.players.exists(p | p == fromPlayer);
	*/ 	

/** ARCS */
	/**
	  * Arcs have both a source and target set
	  */
context SceneToTransitionArc ERROR
	"Invalid Arc; no destination set for Arc " +arcID+".":
	to != null;
context TransitionToSceneArc ERROR
	"Invalid Arc; no destination set for Arc " +arcID+".":
	to != null;
context SceneToTransitionArc ERROR
	"Invalid Arc; no source set for Arc " + arcID+".":
	from != null;
context TransitionToSceneArc ERROR
	"Invalid Arc; no source set for Arc " + arcID+".":
	from != null;
	
	/**
	  * Arcs should have an unique ID
	  */
context Arc ERROR
	"Conflicting Arc IDs: " +arcID+ " is not unique.":
	((IS)eContainer).arcs.notExists(a | a.arcID == this.arcID && a != this);
	
	
	
/** PLAYERS */
	/**
	  * Players should have an ID
	  */
context Player ERROR 
	"Scene " +((Scene)eContainer).sceneID+ " contains Players without an ID.":
	playerID != null;

	/**
	  * Players should have a role.
	  */
context Player ERROR
	"Player " +playerID+ " in scene " +((Scene)this.eContainer).sceneID+ " does not have a Role.":
	role != null;
	
	/**
	  * Player IDs should be unique for a scene
	  */
context Player ERROR
	"Scene " + ((Scene)eContainer).sceneID + " contains players with the non-unique identifier " + playerID + ".":
	((Scene)eContainer).players.notExists(p | p.playerID == this.playerID && p != this);
	
	
	
/** LANDMARKS & LANDMARK PATTERNS */
	/**
	  * Landmark patterns should not be empty
	  */
context LandmarkPattern ERROR
	"The landmark pattern of scene " + ((Scene)this.eContainer).sceneID + " is empty.":
	landmarks.size > 0 || ((Scene)eContainer).type != SceneType::Normal; 
	
	/**
	  * Landmarks should be connected.
	  */
context LandmarkPattern ERROR
	"The landmarkpattern of scene " +((Scene)this.eContainer).sceneID + " contains disconnected landmarks.":
	landmarks.size > 2 ? landmarks.forAll(l1 | landmarkOrder.exists(o | o.from == l1 || o.to == l1)): true;
	
	/**
	  * Landmark patterns should have more than 2 landmarks and more than 1 ordering, but one can deviate from this (exception => warning)
	  *//*
context LandmarkPattern WARNING
	"The landmarkpattern of scene " +((Scene)this.eContainer).sceneID + " has less than 2 landmarks.":
	landmarks.size < 2 ? (landmarks.size > 0 || ((Scene)eContainer.type != SceneType::Normal) : true;*/
	
	/**
	  * Landmark names should be unique
	  */
context Landmark ERROR
	"Conflicting Landmark names: The landmark pattern of scene " +((Scene)((LandmarkPattern)eContainer).eContainer).sceneID+ " contains a non-unique landmark " +name+".":
	((LandmarkPattern)eContainer).landmarks.notExists(l | l.name == this.name && l != this);
	//((LandmarkPattern)eContainer).landmarks.forAll(l | l.name == this.name ? l == this);
	
	/**
	  * Landmarks should have a state-description
	  */
context Landmark ERROR
	"Landmark " + name + " in scene " + ((Scene)eContainer.eContainer).sceneID + " does not have a state description.":
	stateDescription != null || name == "Start" || name == "start";
	
	
	
/** NORMS AND DEONTICS */
	/**
	  * Norm elements should be filled correctly
	  */
context Norm ERROR
	"Norm " +normID+ " lacks an Activation Condition.":
	activationCondition != null;
context Norm ERROR
	"Norm " +normID+ " lacks an Expiration Condition.":
	expirationCondition != null;
context Norm ERROR
	"Norm " +normID+ " lacks a Maintenance Condition.":
	maintenanceCondition != null;
context Norm ERROR
	"Norm " +normID+ " lacks a deontic statement.":
	deontics != null;
context DeonticStatement ERROR
	"The deontic statement (what) of norm " + ((Norm)eContainer).normID+ " is not set.":
	what != null;
context RoleDeonticStatement ERROR
	"The deontic statement of norm " +((Norm)eContainer).normID+ " requires the specification of a Role.":
	role != null;
		
	/**
	  * Norm identifiers ought to be unique
	  */
context Norm ERROR
	"The normative structure contains norms with the non-unique identifier " +normID+ ".":
	((NS)eContainer).norms.notExists(n | n.normID == this.normID && n != this);
	
	
	
	
/** ONTOLOGY & CONCEPTS */
	/**
	  * There should be a default ontology
	  */
context CS ERROR
	"Default ontology is missing.":
	ontology.exists(o | o.ontologyID == "Default");
	
	/**
	  * Concepts in a single ontology are unique
	  */
context Concept ERROR
	"The ontology " +((Ontology)eContainer).ontologyID + " contains duplicate concepts " + concept +".":
	((Ontology)eContainer).classes.notExists(c | c.concept == this.concept && c != this && c.type == this.type);

	/**
	  * Concepts in the Default ontology that are not used might be superfluous. Design mistake?
	  */
context Concept WARNING
	"The Default ontology contains the concept " +concept+ " that is not used in other parts of the model.":
	((Ontology)eContainer).ontologyID != "Default" || 
		( 
			((OM)eContainer.eContainer.eContainer).ss.roles.exists(r | r.conceptName == this) ||
			((OM)eContainer.eContainer.eContainer).ss.objectives.exists(o | o.conceptName == this) ||
			((OM)eContainer.eContainer.eContainer).cs.formulas.typeSelect(Atom).exists(a | a.concept == this) ||
			((OM)eContainer.eContainer.eContainer).cs.terms.typeSelect(Constant).exists(c | c.concept == this)
		);
	
	/**
	  * Concepts should not be used for both Role and Objective names
	  */
context Concept ERROR
	"The concept " + concept + " is used to describe both a Role and an Objective.":
	((OM)eContainer.eContainer.eContainer).ss.roles.notExists(r | r.conceptName == this) ||
	((OM)eContainer.eContainer.eContainer).ss.objectives.notExists(o | o.conceptName == this);
	
	/**
	  * Using a concept for both a Role/Objective name and a Proposition could be a mistake.
	  * Roles & Atoms makes sense (this could be wrong)
	  * Objectives & Atoms might need to be deleted as this could be quite sensible (Obj.PSD = PSD = Obj.Name).
	  */
context Concept WARNING
	"The concept " +concept+ " is used to describe both a Role and a Predicate.":
	((OM)eContainer.eContainer.eContainer).ss.roles.notExists(r | r.conceptName == this) ||
	((CS)eContainer.eContainer).formulas.typeSelect(Atom).notExists(a | a.concept == this);
context Concept WARNING
	"The concept " +concept+ " is used to describe both an Objective and a Predicate.":
	((OM)eContainer.eContainer.eContainer).ss.objectives.notExists(o | o.conceptName == this) ||
	((CS)eContainer.eContainer).formulas.typeSelect(Atom).notExists(a | a.concept == this);
	
	
	
/** PARTIAL STATE DESCRIPTIONS */
	/** 
	  * Elements in PartialStateDescriptions need to be filled correctly (e.g., a conjunction requires both a left-hand and right-hand side specified).
	  */
context Atom ERROR
	"Communicative Structure contains Atom without a Predicate name.":
	predicate != null;
context Negation ERROR
	"Communicative Structure contains incorrect Negations; no sub-formula specified.":
	stateFormula != null;
context Conjunction ERROR
	"Communicative Structure contains incorrect Conjunction; left-hand side missing.":
	leftStateFormula != null;
context Conjunction ERROR
	"Communicative Structure contains incorrect Conjunction; right-hand side missing.":
	rightStateFormula != null;
context Disjunction ERROR
	"Communicative Structure contains incorrect Disjunction; left-hand side missing.":
	leftStateFormula != null;
context Disjunction ERROR
	"Communicative Structure contains incorrect Disjunction; right-hand side missing.":
	rightStateFormula != null;
context Implication ERROR
	"Communicative Structure contains incorrect Implication; antecedent (left-hand side) is missing.":
	antecedentStateFormula != null;
context Implication ERROR
	"Communicative Structure contains incorrect Implication; consequent (right-hand side)  is missing.":
	consequentStateFormula != null;
context ForAllPaths ERROR
	"Communicative Structure contains incorrect AllPaths formula; path formula is missing.":
	pathFormula != null;
context ExistsPath ERROR
	"Communicative Structure contains incorrect ExistsPath formula; path formula is missing.":
	pathFormula != null;
context PathNegation ERROR
	"Communicative Structure contains incorrect Path Negation; no sub-formula specified.":
	pathFormula != null;
context PathConjunction ERROR
	"Communicative Structure contains incorrect Path Conjunction; left-hand side missing.":
	leftPathFormula != null;
context PathConjunction ERROR
	"Communicative Structure contains incorrect Path Conjunction; right-hand side missing.":
	rightPathFormula != null;
context PathDisjunction ERROR
	"Communicative Structure contains incorrect Path Disjunction; left-hand side missing.":
	leftPathFormula != null;
context PathDisjunction ERROR
	"Communcative Structure contains incorrect Path Disjunction; right-hand side missing.":
	rightPathFormula != null;
context PathImplication ERROR
	"Communicative Structure contains incorrect Path Implication; antecendent (left-hand side) is missing.":
	antecedentPathFormula != null;
context PathImplication ERROR
	"Communicative Structure contains incorrect Path Implication; consequent (right-hand side) is missing.":
	consequentPathFormula != null;
context Next ERROR
 	"Communicative Structure contains incorrect Next formula; path formula is missing.":
 	pathFormula != null;
context Sometime ERROR
	"Communicative Structure contains incorrect Sometime formula; path formula is missing.":
	pathFormula != null;
context Always ERROR
	"Communicative Structure contains incorrect Always formula; path formula is missing.":
	pathFormula != null;
context Until ERROR
	"Communicative Structure contains incorrect Until formula; left-hand side missing.":
	fromPathFormula != null;
context Until ERROR
	"Communicative Structure contains incorrect Until formula; right-hand side missing.":
	untilPathFormula != null;
	
	/**
	  * Partial state description not used in other parts of the model. Design mistake?
	  *
	  * The following constraint checks whether the PSD is used in either one of the following:
	  * - a role right
	  * - an objective state description
	  * - landmark state description
	  * - elements of norms (activation, expiration, maintenance conditions or deontic statements)
	  * - other PSD (as subformula
	  *
	  * Closure based on sub-formula containment is derived from the fact that *every* PSD is contained in the CS.
	  * We only have to check the next parent level PSD in the CS, since these themselves are checked as well. 
	  */
context PartialStateDescription WARNING
	"The Partial State Description " + ID + " is not used in other parts of the model.":
	((OM)eContainer.eContainer).ss.roles.exists(r | r.rights.Expr.contains(this)) ||
	((OM)eContainer.eContainer).ss.objectives.exists(o | o.stateDescription == this) ||
	((OM)eContainer.eContainer).is.scenes.exists(s | s.interactionPattern.landmarks.exists(l | l.stateDescription == this)) ||
	((OM)eContainer.eContainer).ns.norms.exists(n | n.activationCondition == this || n.expirationCondition == this || n.maintenanceCondition == this || n.deontics.what == this) ||
	((CS)eContainer).formulas.typeSelect(Negation).exists(f | f.stateFormula == this) ||
	((CS)eContainer).formulas.typeSelect(Conjunction).exists(f | f.leftStateFormula == this || f.rightStateFormula == this) ||
	((CS)eContainer).formulas.typeSelect(Disjunction).exists(f | f.leftStateFormula == this || f.rightStateFormula == this) ||
	((CS)eContainer).formulas.typeSelect(Implication).exists(f | f.antecedentStateFormula == this || f.consequentStateFormula == this) ||
	((CS)eContainer).formulas.typeSelect(ForAllPaths).exists(f | f.pathFormula == this) ||
	((CS)eContainer).formulas.typeSelect(ExistsPath).exists(f | f.pathFormula == this) ||
	((CS)eContainer).formulas.typeSelect(PathNegation).exists(f | f.pathFormula == this) ||
	((CS)eContainer).formulas.typeSelect(PathConjunction).exists(f | f.leftPathFormula == this || f.rightPathFormula == this) ||
	((CS)eContainer).formulas.typeSelect(PathDisjunction).exists(f | f.leftPathFormula == this || f.rightPathFormula == this) ||
	((CS)eContainer).formulas.typeSelect(PathImplication).exists(f | f.antecedentPathFormula == this || f.consequentPathFormula == this) ||
	((CS)eContainer).formulas.typeSelect(Next).exists(f | f.pathFormula == this) ||
	((CS)eContainer).formulas.typeSelect(Sometime).exists(f | f.pathFormula == this) ||
	((CS)eContainer).formulas.typeSelect(Always).exists(f | f.pathFormula == this) ||
	((CS)eContainer).formulas.typeSelect(Until).exists(f | f.fromPathFormula == this || f.untilPathFormula == this);
	
context Atom ERROR
	"The predicate " + ID + " is not related to a concept from the ontology.":
	concept != null;
	
/** TERMS */
	/** 
	  * Elements in Terms need to be filled correctly.
	  */	
context Constant ERROR
	"The CS contains a constant with no name defined.":
	name != null || name != "";
context Constant ERROR
	"The Constant " + name + " is not related to a concept from the ontology.":
	concept != null;	

	/**
	  * Checks whether the Constants and Variables are actually used anywhere
	  */
context Constant WARNING
	"The constant " + name + " is not used in other parts of the model.":
	((CS)eContainer).formulas.typeSelect(Atom).exists(f | f.arguments.contains(this)) ||
	((CS)eContainer).terms.typeSelect(Function).exists(f | f.arguments.contains(this));
context Variable WARNING
	"The variable " + name + " is not used in other parts of the model.":
	((CS)eContainer).formulas.typeSelect(Atom).exists(f | f.arguments.contains(this)) ||
	((CS)eContainer).terms.typeSelect(Function).exists(f | f.arguments.contains(this));
context Function WARNING
	"The function " + name + " is not used in other parts of the model.":
	((CS)eContainer).formulas.typeSelect(Atom).exists(a | a.arguments.contains(this)) ||
	((CS)eContainer).terms.typeSelect(Function).exists(f | f.arguments.contains(this));
	
/** COUNTS-AS */
	/**
	  * Elements of the Counts-As need to be filled correctly.
	  */
context CountsAs ERROR
	"Communicative Structure contains incorrect Counts-As; left-hand side (concrete fact) missing.":
	concreteFact != null;
context CountsAs ERROR
	"Communicative Structure contains incorrect Counts-As; right-hand (abstract fact) side missing.":
	abstractFact != null;