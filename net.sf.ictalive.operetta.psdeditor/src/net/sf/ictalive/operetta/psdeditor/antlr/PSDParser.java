// $ANTLR 3.2 Sep 23, 2009 12:02:23 /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g 2010-09-13 18:47:32

/*
 * Generated by ANTLR from net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g
 *
 * Do not modify this file directly.
 *
 */

package net.sf.ictalive.operetta.psdeditor.antlr;
import java.util.Collections;
import org.antlr.runtime.Token;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import net.sf.ictalive.operetta.OM.PartialStateDescription;
import net.sf.ictalive.operetta.OM.PathFormula;
import net.sf.ictalive.operetta.OM.StateFormula;
import net.sf.ictalive.operetta.OM.Atom;
import net.sf.ictalive.operetta.OM.Term;
import net.sf.ictalive.operetta.OM.OM;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
public class PSDParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "IDENT", "OPERATOR", "NUMBER", "WS", "'U'", "'X'", "'F'", "'G'", "'->'", "'\\u2192'", "'|'", "'\\u2228'", "'^'", "'&'", "'\\u2227'", "'~'", "'\\u00ac'", "'['", "']'", "'('", "')'", "'E'", "'A'", "','", "'$'"
    };
    public static final int T__28=28;
    public static final int T__27=27;
    public static final int T__26=26;
    public static final int T__25=25;
    public static final int T__24=24;
    public static final int T__23=23;
    public static final int OPERATOR=5;
    public static final int T__22=22;
    public static final int T__21=21;
    public static final int T__20=20;
    public static final int NUMBER=6;
    public static final int EOF=-1;
    public static final int T__9=9;
    public static final int T__8=8;
    public static final int T__19=19;
    public static final int WS=7;
    public static final int T__16=16;
    public static final int T__15=15;
    public static final int T__18=18;
    public static final int T__17=17;
    public static final int T__12=12;
    public static final int T__11=11;
    public static final int T__14=14;
    public static final int T__13=13;
    public static final int T__10=10;
    public static final int IDENT=4;

    // delegates
    // delegators


        public PSDParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public PSDParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        

    public String[] getTokenNames() { return PSDParser.tokenNames; }
    public String getGrammarFileName() { return "/Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g"; }


    protected TransactionalEditingDomain editingDomain;
    protected OM om;

    public class ParseResult {
    	public PartialStateDescription psd;
    	public Ranges ranges;
    	public ParseResult(PartialStateDescription psd, Ranges ranges) {
    		this.psd = psd;
    		this.ranges = ranges;
    	}
    }
        
    public static ParseResult parse(TransactionalEditingDomain editingDomain, OM om, String inputStr) throws ParseException {
    	//System.out.println("Input: \""+inputStr+"\"\n");
    	PSDLexer lexer = new PSDLexer(new ANTLRStringStream(inputStr));
    	CommonTokenStream tokens = new CommonTokenStream(lexer);
    	PSDParser parser = new PSDParser(tokens);
    	parser.editingDomain = editingDomain;
    	
    	parser.allRanges = parser.new Ranges();
    	parser.om = om;

    	try {
    		PartialStateDescription psd = parser.root();
    		parser.allRanges.patch(inputStr.length());
    		return parser.new ParseResult(psd, parser.allRanges);
    	}
    	catch (IllegalArgumentException e) {
    		RecognitionException lexerException = (RecognitionException)e.getCause();
    		throw new ParseException(lexer.getErrorMessage(lexerException,lexer.getTokenNames()), lexerException.charPositionInLine);
    	}
    	catch (RecognitionException e)  {
    		throw new ParseException(parser.getErrorMessage(e,parser.getTokenNames()), e.charPositionInLine);
    	}
    }

    @Override
    protected Object recoverFromMismatchedToken(IntStream input,
        	int ttype,
        	BitSet follow)
    throws RecognitionException
    {
    	throw new MismatchedTokenException(ttype, input);
    }
        
    // return the position of the token 
    int getPos(Token start) {
    	return start.getCharPositionInLine();
    }

    // return the position of the next token to be processed
    int getCurrentPos() {
    	return input.LT(1).getCharPositionInLine();
    }

    public Ranges allRanges;

    public class Ranges extends ArrayList<Range>{
    	public Ranges() {
    	}
    	
    	public Ranges(Token start) {
    		super();
    	}

    	// track is called on creation, but also in each of the chain rules, even if the chain has only 1 element
    	public void track(int startPos, int endPos, Object object) {
    		//System.out.println("Tracking "+psd+": <"+startPos+","+endPos+">");
    		add(new Range(object, startPos, endPos));
    	}
    	// reverse the list, so root range is at the top, and convert -1 to end position
    	public void patch(int endPos) {
    		Collections.reverse(this);
    		for (Range range : this)
    			if (range.endPos == -1)
    				range.endPos = endPos;

    	}
    };

    public class Range {
    	public Object object;
    	public int startPos;
    	public int endPos;
    	
    	public Range(Object object, int startPos, int endPos) {
    		this.object = object;
    		this.startPos = startPos;
    		this.endPos = endPos;
    	}
    }




    // $ANTLR start "root"
    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:155:1: root returns [PartialStateDescription sem] : ( state EOF | path EOF );
    public final PartialStateDescription root() throws RecognitionException {
        PartialStateDescription sem = null;

        PSDParser.state_return state1 = null;

        PSDParser.path_return path2 = null;


        try {
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:156:2: ( state EOF | path EOF )
            int alt1=2;
            alt1 = dfa1.predict(input);
            switch (alt1) {
                case 1 :
                    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:157:3: state EOF
                    {
                    pushFollow(FOLLOW_state_in_root73);
                    state1=state();

                    state._fsp--;
                    if (state.failed) return sem;
                    match(input,EOF,FOLLOW_EOF_in_root75); if (state.failed) return sem;
                    if ( state.backtracking==0 ) {
                       sem = (state1!=null?state1.sem:null); 
                    }

                    }
                    break;
                case 2 :
                    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:159:3: path EOF
                    {
                    pushFollow(FOLLOW_path_in_root84);
                    path2=path();

                    state._fsp--;
                    if (state.failed) return sem;
                    match(input,EOF,FOLLOW_EOF_in_root86); if (state.failed) return sem;
                    if ( state.backtracking==0 ) {
                       sem = (path2!=null?path2.sem:null); 
                    }

                    }
                    break;

            }
        }
             finally {
        }
        return sem;
    }
    // $ANTLR end "root"

    public static class path_return extends ParserRuleReturnScope {
        public PathFormula sem;
    };

    // $ANTLR start "path"
    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:162:1: path returns [PathFormula sem] : p1= path1 ( ( 'U' ) p2= path1 )* ;
    public final PSDParser.path_return path() throws RecognitionException {
        PSDParser.path_return retval = new PSDParser.path_return();
        retval.start = input.LT(1);

        PSDParser.path1_return p1 = null;

        PSDParser.path1_return p2 = null;


         Ranges psds = new Ranges(((Token)retval.start)); 
        try {
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:163:3: (p1= path1 ( ( 'U' ) p2= path1 )* )
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:163:6: p1= path1 ( ( 'U' ) p2= path1 )*
            {
            pushFollow(FOLLOW_path1_in_path113);
            p1=path1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               psds.track(getPos(((Token)retval.start)), getCurrentPos(), (p1!=null?p1.sem:null)); 
            }
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:163:73: ( ( 'U' ) p2= path1 )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==8) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:163:74: ( 'U' ) p2= path1
            	    {
            	    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:163:74: ( 'U' )
            	    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:163:75: 'U'
            	    {
            	    match(input,8,FOLLOW_8_in_path119); if (state.failed) return retval;

            	    }

            	    pushFollow(FOLLOW_path1_in_path124);
            	    p2=path1();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	        psds.track(getPos(((Token)retval.start)), getCurrentPos(), (p2!=null?p2.sem:null)); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              retval.sem = PSDSemantics.semPath( editingDomain, om, allRanges, psds); 
            }

            }

            retval.stop = input.LT(-1);

        }
             finally {
        }
        return retval;
    }
    // $ANTLR end "path"

    public static class path1_return extends ParserRuleReturnScope {
        public PathFormula sem;
    };

    // $ANTLR start "path1"
    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:167:1: path1 returns [PathFormula sem] : ( 'X' state | 'F' state | 'G' state | path2 );
    public final PSDParser.path1_return path1() throws RecognitionException {
        PSDParser.path1_return retval = new PSDParser.path1_return();
        retval.start = input.LT(1);

        PSDParser.state_return state3 = null;

        PSDParser.state_return state4 = null;

        PSDParser.state_return state5 = null;

        PSDParser.path2_return path26 = null;


        try {
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:168:3: ( 'X' state | 'F' state | 'G' state | path2 )
            int alt3=4;
            switch ( input.LA(1) ) {
            case 9:
                {
                alt3=1;
                }
                break;
            case 10:
                {
                alt3=2;
                }
                break;
            case 11:
                {
                alt3=3;
                }
                break;
            case 19:
            case 20:
            case 21:
            case 23:
                {
                alt3=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;
            }

            switch (alt3) {
                case 1 :
                    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:168:5: 'X' state
                    {
                    match(input,9,FOLLOW_9_in_path1150); if (state.failed) return retval;
                    pushFollow(FOLLOW_state_in_path1153);
                    state3=state();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       retval.sem = PSDSemantics.semPath1_0( editingDomain, om, allRanges, getPos(((Token)retval.start)), getCurrentPos(), (state3!=null?state3.sem:null) ); 
                    }

                    }
                    break;
                case 2 :
                    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:169:5: 'F' state
                    {
                    match(input,10,FOLLOW_10_in_path1161); if (state.failed) return retval;
                    pushFollow(FOLLOW_state_in_path1164);
                    state4=state();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       retval.sem = PSDSemantics.semPath1_1( editingDomain, om, allRanges, getPos(((Token)retval.start)), getCurrentPos(), (state4!=null?state4.sem:null) ); 
                    }

                    }
                    break;
                case 3 :
                    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:170:5: 'G' state
                    {
                    match(input,11,FOLLOW_11_in_path1172); if (state.failed) return retval;
                    pushFollow(FOLLOW_state_in_path1175);
                    state5=state();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       retval.sem = PSDSemantics.semPath1_2( editingDomain, om, allRanges, getPos(((Token)retval.start)), getCurrentPos(), (state5!=null?state5.sem:null) ); 
                    }

                    }
                    break;
                case 4 :
                    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:171:4: path2
                    {
                    pushFollow(FOLLOW_path2_in_path1182);
                    path26=path2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       retval.sem = (path26!=null?path26.sem:null); 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
             finally {
        }
        return retval;
    }
    // $ANTLR end "path1"

    public static class path2_return extends ParserRuleReturnScope {
        public PathFormula sem;
    };

    // $ANTLR start "path2"
    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:174:1: path2 returns [PathFormula sem] : p1= path3 ( ( '->' | '\\u2192' ) p2= path3 )* ;
    public final PSDParser.path2_return path2() throws RecognitionException {
        PSDParser.path2_return retval = new PSDParser.path2_return();
        retval.start = input.LT(1);

        PSDParser.path3_return p1 = null;

        PSDParser.path3_return p2 = null;


         Ranges psds = new Ranges(((Token)retval.start)); 
        try {
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:175:3: (p1= path3 ( ( '->' | '\\u2192' ) p2= path3 )* )
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:175:7: p1= path3 ( ( '->' | '\\u2192' ) p2= path3 )*
            {
            pushFollow(FOLLOW_path3_in_path2210);
            p1=path3();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               psds.track(getPos(((Token)retval.start)), getCurrentPos(), (p1!=null?p1.sem:null)); 
            }
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:175:74: ( ( '->' | '\\u2192' ) p2= path3 )*
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( ((LA4_0>=12 && LA4_0<=13)) ) {
                    alt4=1;
                }


                switch (alt4) {
            	case 1 :
            	    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:175:75: ( '->' | '\\u2192' ) p2= path3
            	    {
            	    if ( (input.LA(1)>=12 && input.LA(1)<=13) ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_path3_in_path2223);
            	    p2=path3();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	        psds.track(getPos(((Token)retval.start)), getCurrentPos(), (p2!=null?p2.sem:null)); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              retval.sem = PSDSemantics.semPath2( editingDomain, om, allRanges, psds); 
            }

            }

            retval.stop = input.LT(-1);

        }
             finally {
        }
        return retval;
    }
    // $ANTLR end "path2"

    public static class path3_return extends ParserRuleReturnScope {
        public PathFormula sem;
    };

    // $ANTLR start "path3"
    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:178:1: path3 returns [PathFormula sem] : p1= path4 ( ( '|' | '\\u2228' ) p2= path4 )* ;
    public final PSDParser.path3_return path3() throws RecognitionException {
        PSDParser.path3_return retval = new PSDParser.path3_return();
        retval.start = input.LT(1);

        PSDParser.path4_return p1 = null;

        PSDParser.path4_return p2 = null;


         Ranges psds = new Ranges(((Token)retval.start)); 
        try {
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:179:3: (p1= path4 ( ( '|' | '\\u2228' ) p2= path4 )* )
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:179:6: p1= path4 ( ( '|' | '\\u2228' ) p2= path4 )*
            {
            pushFollow(FOLLOW_path4_in_path3325);
            p1=path4();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               psds.track(getPos(((Token)retval.start)), getCurrentPos(), (p1!=null?p1.sem:null)); 
            }
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:179:73: ( ( '|' | '\\u2228' ) p2= path4 )*
            loop5:
            do {
                int alt5=2;
                int LA5_0 = input.LA(1);

                if ( ((LA5_0>=14 && LA5_0<=15)) ) {
                    alt5=1;
                }


                switch (alt5) {
            	case 1 :
            	    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:179:74: ( '|' | '\\u2228' ) p2= path4
            	    {
            	    if ( (input.LA(1)>=14 && input.LA(1)<=15) ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_path4_in_path3338);
            	    p2=path4();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	        psds.track(getPos(((Token)retval.start)), getCurrentPos(), (p2!=null?p2.sem:null)); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              retval.sem = PSDSemantics.semPath3( editingDomain, om, allRanges, psds); 
            }

            }

            retval.stop = input.LT(-1);

        }
             finally {
        }
        return retval;
    }
    // $ANTLR end "path3"

    public static class path4_return extends ParserRuleReturnScope {
        public PathFormula sem;
    };

    // $ANTLR start "path4"
    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:182:1: path4 returns [PathFormula sem] : p1= path5 ( ( '^' | '&' | '\\u2227' ) p2= path5 )* ;
    public final PSDParser.path4_return path4() throws RecognitionException {
        PSDParser.path4_return retval = new PSDParser.path4_return();
        retval.start = input.LT(1);

        PSDParser.path5_return p1 = null;

        PSDParser.path5_return p2 = null;


         Ranges psds = new Ranges(((Token)retval.start)); 
        try {
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:183:2: (p1= path5 ( ( '^' | '&' | '\\u2227' ) p2= path5 )* )
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:183:5: p1= path5 ( ( '^' | '&' | '\\u2227' ) p2= path5 )*
            {
            pushFollow(FOLLOW_path5_in_path4368);
            p1=path5();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               psds.track(getPos(((Token)retval.start)), getCurrentPos(), (p1!=null?p1.sem:null)); 
            }
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:183:72: ( ( '^' | '&' | '\\u2227' ) p2= path5 )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( ((LA6_0>=16 && LA6_0<=18)) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:183:73: ( '^' | '&' | '\\u2227' ) p2= path5
            	    {
            	    if ( (input.LA(1)>=16 && input.LA(1)<=18) ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_path5_in_path4383);
            	    p2=path5();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	        psds.track(getPos(((Token)retval.start)), getCurrentPos(), (p2!=null?p2.sem:null)); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              retval.sem = PSDSemantics.semPath4( editingDomain, om, allRanges, psds); 
            }

            }

            retval.stop = input.LT(-1);

        }
             finally {
        }
        return retval;
    }
    // $ANTLR end "path4"

    public static class path5_return extends ParserRuleReturnScope {
        public PathFormula sem;
    };

    // $ANTLR start "path5"
    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:186:1: path5 returns [PathFormula sem] : ( ( '~' | '\\u00ac' ) p= path5 | '[' state ']' | '(' path ')' );
    public final PSDParser.path5_return path5() throws RecognitionException {
        PSDParser.path5_return retval = new PSDParser.path5_return();
        retval.start = input.LT(1);

        PSDParser.path5_return p = null;

        PSDParser.state_return state7 = null;

        PSDParser.path_return path8 = null;


        try {
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:187:3: ( ( '~' | '\\u00ac' ) p= path5 | '[' state ']' | '(' path ')' )
            int alt7=3;
            switch ( input.LA(1) ) {
            case 19:
            case 20:
                {
                alt7=1;
                }
                break;
            case 21:
                {
                alt7=2;
                }
                break;
            case 23:
                {
                alt7=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;
            }

            switch (alt7) {
                case 1 :
                    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:187:5: ( '~' | '\\u00ac' ) p= path5
                    {
                    if ( (input.LA(1)>=19 && input.LA(1)<=20) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    pushFollow(FOLLOW_path5_in_path5414);
                    p=path5();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       retval.sem = PSDSemantics.semPath5( editingDomain, om, allRanges, getPos(((Token)retval.start)), getCurrentPos(), (p!=null?p.sem:null) ); 
                    }

                    }
                    break;
                case 2 :
                    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:188:4: '[' state ']'
                    {
                    match(input,21,FOLLOW_21_in_path5421); if (state.failed) return retval;
                    pushFollow(FOLLOW_state_in_path5423);
                    state7=state();

                    state._fsp--;
                    if (state.failed) return retval;
                    match(input,22,FOLLOW_22_in_path5425); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       retval.sem = (state7!=null?state7.sem:null); 
                    }

                    }
                    break;
                case 3 :
                    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:189:4: '(' path ')'
                    {
                    match(input,23,FOLLOW_23_in_path5432); if (state.failed) return retval;
                    pushFollow(FOLLOW_path_in_path5434);
                    path8=path();

                    state._fsp--;
                    if (state.failed) return retval;
                    match(input,24,FOLLOW_24_in_path5436); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       retval.sem = (path8!=null?path8.sem:null); 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
             finally {
        }
        return retval;
    }
    // $ANTLR end "path5"

    public static class state_return extends ParserRuleReturnScope {
        public StateFormula sem;
        public int endPos;
    };

    // $ANTLR start "state"
    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:193:1: state returns [StateFormula sem, int endPos] : ( 'E' path1 | 'A' path1 | state1 );
    public final PSDParser.state_return state() throws RecognitionException {
        PSDParser.state_return retval = new PSDParser.state_return();
        retval.start = input.LT(1);

        PSDParser.path1_return path19 = null;

        PSDParser.path1_return path110 = null;

        PSDParser.state1_return state111 = null;


        try {
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:194:2: ( 'E' path1 | 'A' path1 | state1 )
            int alt8=3;
            switch ( input.LA(1) ) {
            case 25:
                {
                alt8=1;
                }
                break;
            case 26:
                {
                alt8=2;
                }
                break;
            case IDENT:
            case OPERATOR:
            case 19:
            case 20:
            case 23:
                {
                alt8=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;
            }

            switch (alt8) {
                case 1 :
                    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:194:5: 'E' path1
                    {
                    match(input,25,FOLLOW_25_in_state460); if (state.failed) return retval;
                    pushFollow(FOLLOW_path1_in_state462);
                    path19=path1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       retval.sem = PSDSemantics.semState0_0( editingDomain, om, allRanges, getPos(((Token)retval.start)), getCurrentPos(), (path19!=null?path19.sem:null) ); 
                    }

                    }
                    break;
                case 2 :
                    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:195:4: 'A' path1
                    {
                    match(input,26,FOLLOW_26_in_state469); if (state.failed) return retval;
                    pushFollow(FOLLOW_path1_in_state471);
                    path110=path1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       retval.sem = PSDSemantics.semState0_1( editingDomain, om, allRanges, getPos(((Token)retval.start)), getCurrentPos(), (path110!=null?path110.sem:null) ); 
                    }

                    }
                    break;
                case 3 :
                    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:196:5: state1
                    {
                    pushFollow(FOLLOW_state1_in_state479);
                    state111=state1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       retval.sem = (state111!=null?state111.sem:null); 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
             finally {
        }
        return retval;
    }
    // $ANTLR end "state"

    public static class state1_return extends ParserRuleReturnScope {
        public StateFormula sem;
        public int endPos;
    };

    // $ANTLR start "state1"
    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:199:1: state1 returns [StateFormula sem, int endPos] : s1= state2 ( ( '->' | '\\u2192' ) s2= state2 )* ;
    public final PSDParser.state1_return state1() throws RecognitionException {
        PSDParser.state1_return retval = new PSDParser.state1_return();
        retval.start = input.LT(1);

        PSDParser.state2_return s1 = null;

        PSDParser.state2_return s2 = null;


         Ranges psds = new Ranges(((Token)retval.start)); 
        try {
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:200:2: (s1= state2 ( ( '->' | '\\u2192' ) s2= state2 )* )
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:200:5: s1= state2 ( ( '->' | '\\u2192' ) s2= state2 )*
            {
            pushFollow(FOLLOW_state2_in_state1504);
            s1=state2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               psds.track(getPos(((Token)retval.start)), getCurrentPos(), (s1!=null?s1.sem:null)); 
            }
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:200:73: ( ( '->' | '\\u2192' ) s2= state2 )*
            loop9:
            do {
                int alt9=2;
                int LA9_0 = input.LA(1);

                if ( ((LA9_0>=12 && LA9_0<=13)) ) {
                    alt9=1;
                }


                switch (alt9) {
            	case 1 :
            	    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:200:74: ( '->' | '\\u2192' ) s2= state2
            	    {
            	    if ( (input.LA(1)>=12 && input.LA(1)<=13) ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_state2_in_state1517);
            	    s2=state2();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	        psds.track(getPos(((Token)retval.start)), getCurrentPos(), (s2!=null?s2.sem:null)); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop9;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              retval.sem = PSDSemantics.semState1( editingDomain, om, allRanges, psds); 
            }

            }

            retval.stop = input.LT(-1);

        }
             finally {
        }
        return retval;
    }
    // $ANTLR end "state1"

    public static class state2_return extends ParserRuleReturnScope {
        public StateFormula sem;
        public int endPos;
    };

    // $ANTLR start "state2"
    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:203:1: state2 returns [StateFormula sem, int endPos] : s1= state3 ( ( '|' | '\\u2228' ) s2= state3 )* ;
    public final PSDParser.state2_return state2() throws RecognitionException {
        PSDParser.state2_return retval = new PSDParser.state2_return();
        retval.start = input.LT(1);

        PSDParser.state3_return s1 = null;

        PSDParser.state3_return s2 = null;


         Ranges psds = new Ranges(((Token)retval.start)); 
        try {
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:204:2: (s1= state3 ( ( '|' | '\\u2228' ) s2= state3 )* )
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:204:5: s1= state3 ( ( '|' | '\\u2228' ) s2= state3 )*
            {
            pushFollow(FOLLOW_state3_in_state2547);
            s1=state3();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               psds.track(getPos(((Token)retval.start)), getCurrentPos(), (s1!=null?s1.sem:null)); 
            }
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:204:73: ( ( '|' | '\\u2228' ) s2= state3 )*
            loop10:
            do {
                int alt10=2;
                int LA10_0 = input.LA(1);

                if ( ((LA10_0>=14 && LA10_0<=15)) ) {
                    alt10=1;
                }


                switch (alt10) {
            	case 1 :
            	    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:204:74: ( '|' | '\\u2228' ) s2= state3
            	    {
            	    if ( (input.LA(1)>=14 && input.LA(1)<=15) ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_state3_in_state2560);
            	    s2=state3();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	        psds.track(getPos(((Token)retval.start)), getCurrentPos(), (s2!=null?s2.sem:null)); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop10;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              retval.sem = PSDSemantics.semState2( editingDomain, om, allRanges, psds); 
            }

            }

            retval.stop = input.LT(-1);

        }
             finally {
        }
        return retval;
    }
    // $ANTLR end "state2"

    public static class state3_return extends ParserRuleReturnScope {
        public StateFormula sem;
        public int endPos;
    };

    // $ANTLR start "state3"
    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:207:1: state3 returns [StateFormula sem, int endPos] : s1= state4 ( ( '^' | '&' | '\\u2227' ) s2= state4 )* ;
    public final PSDParser.state3_return state3() throws RecognitionException {
        PSDParser.state3_return retval = new PSDParser.state3_return();
        retval.start = input.LT(1);

        PSDParser.state4_return s1 = null;

        PSDParser.state4_return s2 = null;


         Ranges psds = new Ranges(((Token)retval.start)); 
        try {
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:208:2: (s1= state4 ( ( '^' | '&' | '\\u2227' ) s2= state4 )* )
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:208:5: s1= state4 ( ( '^' | '&' | '\\u2227' ) s2= state4 )*
            {
            pushFollow(FOLLOW_state4_in_state3590);
            s1=state4();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               psds.track(getPos(((Token)retval.start)), getCurrentPos(), (s1!=null?s1.sem:null)); 
            }
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:208:73: ( ( '^' | '&' | '\\u2227' ) s2= state4 )*
            loop11:
            do {
                int alt11=2;
                int LA11_0 = input.LA(1);

                if ( ((LA11_0>=16 && LA11_0<=18)) ) {
                    alt11=1;
                }


                switch (alt11) {
            	case 1 :
            	    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:208:74: ( '^' | '&' | '\\u2227' ) s2= state4
            	    {
            	    if ( (input.LA(1)>=16 && input.LA(1)<=18) ) {
            	        input.consume();
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_state4_in_state3605);
            	    s2=state4();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	        psds.track(getPos(((Token)retval.start)), getCurrentPos(), (s2!=null?s2.sem:null)); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              retval.sem = PSDSemantics.semState3( editingDomain, om, allRanges, psds); 
            }

            }

            retval.stop = input.LT(-1);

        }
             finally {
        }
        return retval;
    }
    // $ANTLR end "state3"

    public static class state4_return extends ParserRuleReturnScope {
        public StateFormula sem;
        public int endPos;
    };

    // $ANTLR start "state4"
    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:211:1: state4 returns [StateFormula sem, int endPos] : ( ( '~' | '\\u00ac' ) s= state4 | '(' state ')' | predicate ( '(' ( terms )? ')' )? );
    public final PSDParser.state4_return state4() throws RecognitionException {
        PSDParser.state4_return retval = new PSDParser.state4_return();
        retval.start = input.LT(1);

        PSDParser.state4_return s = null;

        PSDParser.state_return state12 = null;

        PSDParser.predicate_return predicate13 = null;

        List<Term> terms14 = null;


        try {
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:212:2: ( ( '~' | '\\u00ac' ) s= state4 | '(' state ')' | predicate ( '(' ( terms )? ')' )? )
            int alt14=3;
            switch ( input.LA(1) ) {
            case 19:
            case 20:
                {
                alt14=1;
                }
                break;
            case 23:
                {
                alt14=2;
                }
                break;
            case IDENT:
            case OPERATOR:
                {
                alt14=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;
            }

            switch (alt14) {
                case 1 :
                    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:212:4: ( '~' | '\\u00ac' ) s= state4
                    {
                    if ( (input.LA(1)>=19 && input.LA(1)<=20) ) {
                        input.consume();
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    pushFollow(FOLLOW_state4_in_state4636);
                    s=state4();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       retval.sem = PSDSemantics.semState4( editingDomain, om, allRanges, getPos(((Token)retval.start)), getCurrentPos(), (s!=null?s.sem:null) ); 
                    }

                    }
                    break;
                case 2 :
                    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:213:4: '(' state ')'
                    {
                    match(input,23,FOLLOW_23_in_state4643); if (state.failed) return retval;
                    pushFollow(FOLLOW_state_in_state4645);
                    state12=state();

                    state._fsp--;
                    if (state.failed) return retval;
                    match(input,24,FOLLOW_24_in_state4647); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       retval.sem = (state12!=null?state12.sem:null); 
                    }

                    }
                    break;
                case 3 :
                    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:214:4: predicate ( '(' ( terms )? ')' )?
                    {
                    pushFollow(FOLLOW_predicate_in_state4654);
                    predicate13=predicate();

                    state._fsp--;
                    if (state.failed) return retval;
                    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:214:14: ( '(' ( terms )? ')' )?
                    int alt13=2;
                    int LA13_0 = input.LA(1);

                    if ( (LA13_0==23) ) {
                        alt13=1;
                    }
                    switch (alt13) {
                        case 1 :
                            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:214:15: '(' ( terms )? ')'
                            {
                            match(input,23,FOLLOW_23_in_state4657); if (state.failed) return retval;
                            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:214:19: ( terms )?
                            int alt12=2;
                            int LA12_0 = input.LA(1);

                            if ( ((LA12_0>=IDENT && LA12_0<=NUMBER)||LA12_0==28) ) {
                                alt12=1;
                            }
                            switch (alt12) {
                                case 1 :
                                    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:0:0: terms
                                    {
                                    pushFollow(FOLLOW_terms_in_state4659);
                                    terms14=terms();

                                    state._fsp--;
                                    if (state.failed) return retval;

                                    }
                                    break;

                            }

                            match(input,24,FOLLOW_24_in_state4662); if (state.failed) return retval;

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                       retval.sem = PSDSemantics.semAtom( editingDomain, om, allRanges, getPos(((Token)retval.start)), getCurrentPos(), (predicate13!=null?input.toString(predicate13.start,predicate13.stop):null), terms14 ); 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
             finally {
        }
        return retval;
    }
    // $ANTLR end "state4"


    // $ANTLR start "terms"
    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:218:1: terms returns [ List<Term> sem] : t1= term ( ',' t2= term )* ;
    public final List<Term> terms() throws RecognitionException {
        List<Term> sem = null;

        PSDParser.term_return t1 = null;

        PSDParser.term_return t2 = null;


         List<Term> ts = new ArrayList<Term>(); 
        try {
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:219:2: (t1= term ( ',' t2= term )* )
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:219:4: t1= term ( ',' t2= term )*
            {
            pushFollow(FOLLOW_term_in_terms693);
            t1=term();

            state._fsp--;
            if (state.failed) return sem;
            if ( state.backtracking==0 ) {
               ts.add((t1!=null?t1.sem:null)); 
            }
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:219:33: ( ',' t2= term )*
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==27) ) {
                    alt15=1;
                }


                switch (alt15) {
            	case 1 :
            	    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:219:34: ',' t2= term
            	    {
            	    match(input,27,FOLLOW_27_in_terms698); if (state.failed) return sem;
            	    pushFollow(FOLLOW_term_in_terms702);
            	    t2=term();

            	    state._fsp--;
            	    if (state.failed) return sem;
            	    if ( state.backtracking==0 ) {
            	       ts.add((t2!=null?t2.sem:null)); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               sem = ts; 
            }

            }

        }
             finally {
        }
        return sem;
    }
    // $ANTLR end "terms"

    public static class term_return extends ParserRuleReturnScope {
        public Term sem;
    };

    // $ANTLR start "term"
    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:222:1: term returns [Term sem] : ( function '(' ( terms )? ')' | variable | constant );
    public final PSDParser.term_return term() throws RecognitionException {
        PSDParser.term_return retval = new PSDParser.term_return();
        retval.start = input.LT(1);

        PSDParser.function_return function15 = null;

        List<Term> terms16 = null;

        String variable17 = null;

        PSDParser.constant_return constant18 = null;


        try {
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:223:2: ( function '(' ( terms )? ')' | variable | constant )
            int alt17=3;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA17_1 = input.LA(2);

                if ( (LA17_1==EOF||LA17_1==24||LA17_1==27) ) {
                    alt17=3;
                }
                else if ( (LA17_1==23) ) {
                    alt17=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 17, 1, input);

                    throw nvae;
                }
                }
                break;
            case 28:
                {
                alt17=2;
                }
                break;
            case OPERATOR:
                {
                alt17=1;
                }
                break;
            case NUMBER:
                {
                alt17=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;
            }

            switch (alt17) {
                case 1 :
                    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:223:4: function '(' ( terms )? ')'
                    {
                    pushFollow(FOLLOW_function_in_term724);
                    function15=function();

                    state._fsp--;
                    if (state.failed) return retval;
                    match(input,23,FOLLOW_23_in_term726); if (state.failed) return retval;
                    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:223:17: ( terms )?
                    int alt16=2;
                    int LA16_0 = input.LA(1);

                    if ( ((LA16_0>=IDENT && LA16_0<=NUMBER)||LA16_0==28) ) {
                        alt16=1;
                    }
                    switch (alt16) {
                        case 1 :
                            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:0:0: terms
                            {
                            pushFollow(FOLLOW_terms_in_term728);
                            terms16=terms();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }

                    match(input,24,FOLLOW_24_in_term731); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       retval.sem = PSDSemantics.semTerm_0( editingDomain, om, allRanges, getPos(((Token)retval.start)), getCurrentPos(), (function15!=null?input.toString(function15.start,function15.stop):null), terms16); 
                    }

                    }
                    break;
                case 2 :
                    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:224:9: variable
                    {
                    pushFollow(FOLLOW_variable_in_term744);
                    variable17=variable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       retval.sem = PSDSemantics.semTerm_1( editingDomain, om, allRanges, getPos(((Token)retval.start)), getCurrentPos(), variable17); 
                    }

                    }
                    break;
                case 3 :
                    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:225:9: constant
                    {
                    pushFollow(FOLLOW_constant_in_term756);
                    constant18=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       retval.sem = PSDSemantics.semTerm_2( editingDomain, om, allRanges, getPos(((Token)retval.start)), getCurrentPos(), (constant18!=null?input.toString(constant18.start,constant18.stop):null)); 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
             finally {
        }
        return retval;
    }
    // $ANTLR end "term"


    // $ANTLR start "variable"
    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:229:1: variable returns [ String text ] : '$' IDENT ;
    public final String variable() throws RecognitionException {
        String text = null;

        Token IDENT19=null;

        try {
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:230:3: ( '$' IDENT )
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:230:5: '$' IDENT
            {
            match(input,28,FOLLOW_28_in_variable783); if (state.failed) return text;
            IDENT19=(Token)match(input,IDENT,FOLLOW_IDENT_in_variable785); if (state.failed) return text;
            if ( state.backtracking==0 ) {
               text = (IDENT19!=null?IDENT19.getText():null); 
            }

            }

        }
             finally {
        }
        return text;
    }
    // $ANTLR end "variable"

    public static class predicate_return extends ParserRuleReturnScope {
    };

    // $ANTLR start "predicate"
    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:232:1: predicate : ( IDENT | OPERATOR );
    public final PSDParser.predicate_return predicate() throws RecognitionException {
        PSDParser.predicate_return retval = new PSDParser.predicate_return();
        retval.start = input.LT(1);

        try {
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:232:11: ( IDENT | OPERATOR )
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:
            {
            if ( (input.LA(1)>=IDENT && input.LA(1)<=OPERATOR) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

        }
             finally {
        }
        return retval;
    }
    // $ANTLR end "predicate"

    public static class constant_return extends ParserRuleReturnScope {
    };

    // $ANTLR start "constant"
    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:234:1: constant : ( NUMBER | IDENT );
    public final PSDParser.constant_return constant() throws RecognitionException {
        PSDParser.constant_return retval = new PSDParser.constant_return();
        retval.start = input.LT(1);

        try {
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:234:10: ( NUMBER | IDENT )
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:
            {
            if ( input.LA(1)==IDENT||input.LA(1)==NUMBER ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

        }
             finally {
        }
        return retval;
    }
    // $ANTLR end "constant"

    public static class function_return extends ParserRuleReturnScope {
    };

    // $ANTLR start "function"
    // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:236:1: function : ( IDENT | OPERATOR );
    public final PSDParser.function_return function() throws RecognitionException {
        PSDParser.function_return retval = new PSDParser.function_return();
        retval.start = input.LT(1);

        try {
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:236:10: ( IDENT | OPERATOR )
            // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:
            {
            if ( (input.LA(1)>=IDENT && input.LA(1)<=OPERATOR) ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

        }
             finally {
        }
        return retval;
    }
    // $ANTLR end "function"

    // $ANTLR start synpred1_PSD
    public final void synpred1_PSD_fragment() throws RecognitionException {   
        // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:157:3: ( state EOF )
        // /Users/martijn/svn/ALIVEclipse workspace/net.sf.ictalive.operetta.psdeditor/ANTLR/PSD.g:157:3: state EOF
        {
        pushFollow(FOLLOW_state_in_synpred1_PSD73);
        state();

        state._fsp--;
        if (state.failed) return ;
        match(input,EOF,FOLLOW_EOF_in_synpred1_PSD75); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_PSD

    // Delegated rules

    public final boolean synpred1_PSD() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_PSD_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA1 dfa1 = new DFA1(this);
    static final String DFA1_eotS =
        "\12\uffff";
    static final String DFA1_eofS =
        "\12\uffff";
    static final String DFA1_minS =
        "\1\4\2\uffff\2\0\5\uffff";
    static final String DFA1_maxS =
        "\1\32\2\uffff\2\0\5\uffff";
    static final String DFA1_acceptS =
        "\1\uffff\1\1\4\uffff\1\2\3\uffff";
    static final String DFA1_specialS =
        "\3\uffff\1\0\1\1\5\uffff}>";
    static final String[] DFA1_transitionS = {
            "\2\1\3\uffff\3\6\7\uffff\2\3\1\6\1\uffff\1\4\1\uffff\2\1",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA1_eot = DFA.unpackEncodedString(DFA1_eotS);
    static final short[] DFA1_eof = DFA.unpackEncodedString(DFA1_eofS);
    static final char[] DFA1_min = DFA.unpackEncodedStringToUnsignedChars(DFA1_minS);
    static final char[] DFA1_max = DFA.unpackEncodedStringToUnsignedChars(DFA1_maxS);
    static final short[] DFA1_accept = DFA.unpackEncodedString(DFA1_acceptS);
    static final short[] DFA1_special = DFA.unpackEncodedString(DFA1_specialS);
    static final short[][] DFA1_transition;

    static {
        int numStates = DFA1_transitionS.length;
        DFA1_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA1_transition[i] = DFA.unpackEncodedString(DFA1_transitionS[i]);
        }
    }

    class DFA1 extends DFA {

        public DFA1(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 1;
            this.eot = DFA1_eot;
            this.eof = DFA1_eof;
            this.min = DFA1_min;
            this.max = DFA1_max;
            this.accept = DFA1_accept;
            this.special = DFA1_special;
            this.transition = DFA1_transition;
        }
        public String getDescription() {
            return "155:1: root returns [PartialStateDescription sem] : ( state EOF | path EOF );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA1_3 = input.LA(1);

                         
                        int index1_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_PSD()) ) {s = 1;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index1_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA1_4 = input.LA(1);

                         
                        int index1_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_PSD()) ) {s = 1;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index1_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 1, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_state_in_root73 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_root75 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_path_in_root84 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_root86 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_path1_in_path113 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_8_in_path119 = new BitSet(new long[]{0x0000000000B80E00L});
    public static final BitSet FOLLOW_path1_in_path124 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_9_in_path1150 = new BitSet(new long[]{0x0000000006980030L});
    public static final BitSet FOLLOW_state_in_path1153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_10_in_path1161 = new BitSet(new long[]{0x0000000006980030L});
    public static final BitSet FOLLOW_state_in_path1164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_11_in_path1172 = new BitSet(new long[]{0x0000000006980030L});
    public static final BitSet FOLLOW_state_in_path1175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_path2_in_path1182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_path3_in_path2210 = new BitSet(new long[]{0x0000000000003002L});
    public static final BitSet FOLLOW_set_in_path2215 = new BitSet(new long[]{0x0000000000B80E00L});
    public static final BitSet FOLLOW_path3_in_path2223 = new BitSet(new long[]{0x0000000000003002L});
    public static final BitSet FOLLOW_path4_in_path3325 = new BitSet(new long[]{0x000000000000C002L});
    public static final BitSet FOLLOW_set_in_path3330 = new BitSet(new long[]{0x0000000000B80E00L});
    public static final BitSet FOLLOW_path4_in_path3338 = new BitSet(new long[]{0x000000000000C002L});
    public static final BitSet FOLLOW_path5_in_path4368 = new BitSet(new long[]{0x0000000000070002L});
    public static final BitSet FOLLOW_set_in_path4373 = new BitSet(new long[]{0x0000000000B80E00L});
    public static final BitSet FOLLOW_path5_in_path4383 = new BitSet(new long[]{0x0000000000070002L});
    public static final BitSet FOLLOW_set_in_path5406 = new BitSet(new long[]{0x0000000000B80E00L});
    public static final BitSet FOLLOW_path5_in_path5414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_21_in_path5421 = new BitSet(new long[]{0x0000000006980030L});
    public static final BitSet FOLLOW_state_in_path5423 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_22_in_path5425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_23_in_path5432 = new BitSet(new long[]{0x0000000000B80E00L});
    public static final BitSet FOLLOW_path_in_path5434 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_24_in_path5436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_state460 = new BitSet(new long[]{0x0000000000B80E00L});
    public static final BitSet FOLLOW_path1_in_state462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_state469 = new BitSet(new long[]{0x0000000000B80E00L});
    public static final BitSet FOLLOW_path1_in_state471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_state1_in_state479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_state2_in_state1504 = new BitSet(new long[]{0x0000000000003002L});
    public static final BitSet FOLLOW_set_in_state1509 = new BitSet(new long[]{0x0000000006980030L});
    public static final BitSet FOLLOW_state2_in_state1517 = new BitSet(new long[]{0x0000000000003002L});
    public static final BitSet FOLLOW_state3_in_state2547 = new BitSet(new long[]{0x000000000000C002L});
    public static final BitSet FOLLOW_set_in_state2552 = new BitSet(new long[]{0x0000000006980030L});
    public static final BitSet FOLLOW_state3_in_state2560 = new BitSet(new long[]{0x000000000000C002L});
    public static final BitSet FOLLOW_state4_in_state3590 = new BitSet(new long[]{0x0000000000070002L});
    public static final BitSet FOLLOW_set_in_state3595 = new BitSet(new long[]{0x0000000006980030L});
    public static final BitSet FOLLOW_state4_in_state3605 = new BitSet(new long[]{0x0000000000070002L});
    public static final BitSet FOLLOW_set_in_state4628 = new BitSet(new long[]{0x0000000006980030L});
    public static final BitSet FOLLOW_state4_in_state4636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_23_in_state4643 = new BitSet(new long[]{0x0000000006980030L});
    public static final BitSet FOLLOW_state_in_state4645 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_24_in_state4647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_predicate_in_state4654 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_23_in_state4657 = new BitSet(new long[]{0x0000000011000070L});
    public static final BitSet FOLLOW_terms_in_state4659 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_24_in_state4662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_in_terms693 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_27_in_terms698 = new BitSet(new long[]{0x0000000010000070L});
    public static final BitSet FOLLOW_term_in_terms702 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_function_in_term724 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_23_in_term726 = new BitSet(new long[]{0x0000000011000070L});
    public static final BitSet FOLLOW_terms_in_term728 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_24_in_term731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_in_term744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_term756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_variable783 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_variable785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_predicate0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_constant0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_function0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_state_in_synpred1_PSD73 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_synpred1_PSD75 = new BitSet(new long[]{0x0000000000000002L});

}