/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package net.sf.ictalive.operetta.OM.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.sf.ictalive.operetta.OM.util.OMAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class OMItemProviderAdapterFactory extends OMAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public OMItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.OperAModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperAModelItemProvider operAModelItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.OperAModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperAModelAdapter() {
		if (operAModelItemProvider == null) {
			operAModelItemProvider = new OperAModelItemProvider(this);
		}

		return operAModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.OM} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OMItemProvider omItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.OM}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOMAdapter() {
		if (omItemProvider == null) {
			omItemProvider = new OMItemProvider(this);
		}

		return omItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.SS} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SSItemProvider ssItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.SS}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSSAdapter() {
		if (ssItemProvider == null) {
			ssItemProvider = new SSItemProvider(this);
		}

		return ssItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.IS} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ISItemProvider isItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.IS}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createISAdapter() {
		if (isItemProvider == null) {
			isItemProvider = new ISItemProvider(this);
		}

		return isItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.NS} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NSItemProvider nsItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.NS}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNSAdapter() {
		if (nsItemProvider == null) {
			nsItemProvider = new NSItemProvider(this);
		}

		return nsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.CS} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CSItemProvider csItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.CS}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCSAdapter() {
		if (csItemProvider == null) {
			csItemProvider = new CSItemProvider(this);
		}

		return csItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.Role} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleItemProvider roleItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.Role}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleAdapter() {
		if (roleItemProvider == null) {
			roleItemProvider = new RoleItemProvider(this);
		}

		return roleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.Objective} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectiveItemProvider objectiveItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.Objective}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectiveAdapter() {
		if (objectiveItemProvider == null) {
			objectiveItemProvider = new ObjectiveItemProvider(this);
		}

		return objectiveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.Norm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NormItemProvider normItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.Norm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNormAdapter() {
		if (normItemProvider == null) {
			normItemProvider = new NormItemProvider(this);
		}

		return normItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.IndividualDeonticStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IndividualDeonticStatementItemProvider individualDeonticStatementItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.IndividualDeonticStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIndividualDeonticStatementAdapter() {
		if (individualDeonticStatementItemProvider == null) {
			individualDeonticStatementItemProvider = new IndividualDeonticStatementItemProvider(this);
		}

		return individualDeonticStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.RoleDeonticStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleDeonticStatementItemProvider roleDeonticStatementItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.RoleDeonticStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleDeonticStatementAdapter() {
		if (roleDeonticStatementItemProvider == null) {
			roleDeonticStatementItemProvider = new RoleDeonticStatementItemProvider(this);
		}

		return roleDeonticStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.Right} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RightItemProvider rightItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.Right}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRightAdapter() {
		if (rightItemProvider == null) {
			rightItemProvider = new RightItemProvider(this);
		}

		return rightItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.HierarchyDependency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HierarchyDependencyItemProvider hierarchyDependencyItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.HierarchyDependency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHierarchyDependencyAdapter() {
		if (hierarchyDependencyItemProvider == null) {
			hierarchyDependencyItemProvider = new HierarchyDependencyItemProvider(this);
		}

		return hierarchyDependencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.MarketDependency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MarketDependencyItemProvider marketDependencyItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.MarketDependency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMarketDependencyAdapter() {
		if (marketDependencyItemProvider == null) {
			marketDependencyItemProvider = new MarketDependencyItemProvider(this);
		}

		return marketDependencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.NetworkDependency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetworkDependencyItemProvider networkDependencyItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.NetworkDependency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetworkDependencyAdapter() {
		if (networkDependencyItemProvider == null) {
			networkDependencyItemProvider = new NetworkDependencyItemProvider(this);
		}

		return networkDependencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.Scene} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SceneItemProvider sceneItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.Scene}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSceneAdapter() {
		if (sceneItemProvider == null) {
			sceneItemProvider = new SceneItemProvider(this);
		}

		return sceneItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.Transition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionItemProvider transitionItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.Transition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransitionAdapter() {
		if (transitionItemProvider == null) {
			transitionItemProvider = new TransitionItemProvider(this);
		}

		return transitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.SceneToTransitionArc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SceneToTransitionArcItemProvider sceneToTransitionArcItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.SceneToTransitionArc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSceneToTransitionArcAdapter() {
		if (sceneToTransitionArcItemProvider == null) {
			sceneToTransitionArcItemProvider = new SceneToTransitionArcItemProvider(this);
		}

		return sceneToTransitionArcItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.TransitionToSceneArc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionToSceneArcItemProvider transitionToSceneArcItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.TransitionToSceneArc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransitionToSceneArcAdapter() {
		if (transitionToSceneArcItemProvider == null) {
			transitionToSceneArcItemProvider = new TransitionToSceneArcItemProvider(this);
		}

		return transitionToSceneArcItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.Player} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlayerItemProvider playerItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.Player}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlayerAdapter() {
		if (playerItemProvider == null) {
			playerItemProvider = new PlayerItemProvider(this);
		}

		return playerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.LandmarkPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LandmarkPatternItemProvider landmarkPatternItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.LandmarkPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLandmarkPatternAdapter() {
		if (landmarkPatternItemProvider == null) {
			landmarkPatternItemProvider = new LandmarkPatternItemProvider(this);
		}

		return landmarkPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.Landmark} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LandmarkItemProvider landmarkItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.Landmark}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLandmarkAdapter() {
		if (landmarkItemProvider == null) {
			landmarkItemProvider = new LandmarkItemProvider(this);
		}

		return landmarkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.TransitionNorm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionNormItemProvider transitionNormItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.TransitionNorm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransitionNormAdapter() {
		if (transitionNormItemProvider == null) {
			transitionNormItemProvider = new TransitionNormItemProvider(this);
		}

		return transitionNormItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.PartialOrder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PartialOrderItemProvider partialOrderItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.PartialOrder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPartialOrderAdapter() {
		if (partialOrderItemProvider == null) {
			partialOrderItemProvider = new PartialOrderItemProvider(this);
		}

		return partialOrderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.Atom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AtomItemProvider atomItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.Atom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAtomAdapter() {
		if (atomItemProvider == null) {
			atomItemProvider = new AtomItemProvider(this);
		}

		return atomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.Constant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstantItemProvider constantItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.Constant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstantAdapter() {
		if (constantItemProvider == null) {
			constantItemProvider = new ConstantItemProvider(this);
		}

		return constantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.Variable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableItemProvider variableItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.Variable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableAdapter() {
		if (variableItemProvider == null) {
			variableItemProvider = new VariableItemProvider(this);
		}

		return variableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.Function} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionItemProvider functionItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.Function}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionAdapter() {
		if (functionItemProvider == null) {
			functionItemProvider = new FunctionItemProvider(this);
		}

		return functionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.Negation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NegationItemProvider negationItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.Negation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNegationAdapter() {
		if (negationItemProvider == null) {
			negationItemProvider = new NegationItemProvider(this);
		}

		return negationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.Conjunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConjunctionItemProvider conjunctionItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.Conjunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConjunctionAdapter() {
		if (conjunctionItemProvider == null) {
			conjunctionItemProvider = new ConjunctionItemProvider(this);
		}

		return conjunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.Disjunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DisjunctionItemProvider disjunctionItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.Disjunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisjunctionAdapter() {
		if (disjunctionItemProvider == null) {
			disjunctionItemProvider = new DisjunctionItemProvider(this);
		}

		return disjunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.Implication} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImplicationItemProvider implicationItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.Implication}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImplicationAdapter() {
		if (implicationItemProvider == null) {
			implicationItemProvider = new ImplicationItemProvider(this);
		}

		return implicationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.ForAllPaths} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForAllPathsItemProvider forAllPathsItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.ForAllPaths}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForAllPathsAdapter() {
		if (forAllPathsItemProvider == null) {
			forAllPathsItemProvider = new ForAllPathsItemProvider(this);
		}

		return forAllPathsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.ExistsPath} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExistsPathItemProvider existsPathItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.ExistsPath}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExistsPathAdapter() {
		if (existsPathItemProvider == null) {
			existsPathItemProvider = new ExistsPathItemProvider(this);
		}

		return existsPathItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.PathNegation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PathNegationItemProvider pathNegationItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.PathNegation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPathNegationAdapter() {
		if (pathNegationItemProvider == null) {
			pathNegationItemProvider = new PathNegationItemProvider(this);
		}

		return pathNegationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.PathConjunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PathConjunctionItemProvider pathConjunctionItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.PathConjunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPathConjunctionAdapter() {
		if (pathConjunctionItemProvider == null) {
			pathConjunctionItemProvider = new PathConjunctionItemProvider(this);
		}

		return pathConjunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.PathDisjunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PathDisjunctionItemProvider pathDisjunctionItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.PathDisjunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPathDisjunctionAdapter() {
		if (pathDisjunctionItemProvider == null) {
			pathDisjunctionItemProvider = new PathDisjunctionItemProvider(this);
		}

		return pathDisjunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.PathImplication} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PathImplicationItemProvider pathImplicationItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.PathImplication}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPathImplicationAdapter() {
		if (pathImplicationItemProvider == null) {
			pathImplicationItemProvider = new PathImplicationItemProvider(this);
		}

		return pathImplicationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.Next} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NextItemProvider nextItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.Next}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNextAdapter() {
		if (nextItemProvider == null) {
			nextItemProvider = new NextItemProvider(this);
		}

		return nextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.Sometime} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SometimeItemProvider sometimeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.Sometime}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSometimeAdapter() {
		if (sometimeItemProvider == null) {
			sometimeItemProvider = new SometimeItemProvider(this);
		}

		return sometimeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.Always} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AlwaysItemProvider alwaysItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.Always}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAlwaysAdapter() {
		if (alwaysItemProvider == null) {
			alwaysItemProvider = new AlwaysItemProvider(this);
		}

		return alwaysItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.Until} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UntilItemProvider untilItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.Until}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUntilAdapter() {
		if (untilItemProvider == null) {
			untilItemProvider = new UntilItemProvider(this);
		}

		return untilItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.Ontology} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologyItemProvider ontologyItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.Ontology}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologyAdapter() {
		if (ontologyItemProvider == null) {
			ontologyItemProvider = new OntologyItemProvider(this);
		}

		return ontologyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.Concept} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConceptItemProvider conceptItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.Concept}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConceptAdapter() {
		if (conceptItemProvider == null) {
			conceptItemProvider = new ConceptItemProvider(this);
		}

		return conceptItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.CountsAs} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CountsAsItemProvider countsAsItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.CountsAs}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCountsAsAdapter() {
		if (countsAsItemProvider == null) {
			countsAsItemProvider = new CountsAsItemProvider(this);
		}

		return countsAsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.Actions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionsItemProvider actionsItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.Actions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionsAdapter() {
		if (actionsItemProvider == null) {
			actionsItemProvider = new ActionsItemProvider(this);
		}

		return actionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.AtomicAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AtomicActionItemProvider atomicActionItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.AtomicAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAtomicActionAdapter() {
		if (atomicActionItemProvider == null) {
			atomicActionItemProvider = new AtomicActionItemProvider(this);
		}

		return atomicActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.Sequence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SequenceItemProvider sequenceItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.Sequence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSequenceAdapter() {
		if (sequenceItemProvider == null) {
			sequenceItemProvider = new SequenceItemProvider(this);
		}

		return sequenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.Conditional} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionalItemProvider conditionalItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.Conditional}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionalAdapter() {
		if (conditionalItemProvider == null) {
			conditionalItemProvider = new ConditionalItemProvider(this);
		}

		return conditionalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.ictalive.operetta.OM.Context} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContextItemProvider contextItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.ictalive.operetta.OM.Context}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContextAdapter() {
		if (contextItemProvider == null) {
			contextItemProvider = new ContextItemProvider(this);
		}

		return contextItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (operAModelItemProvider != null) operAModelItemProvider.dispose();
		if (omItemProvider != null) omItemProvider.dispose();
		if (ssItemProvider != null) ssItemProvider.dispose();
		if (isItemProvider != null) isItemProvider.dispose();
		if (nsItemProvider != null) nsItemProvider.dispose();
		if (csItemProvider != null) csItemProvider.dispose();
		if (roleItemProvider != null) roleItemProvider.dispose();
		if (objectiveItemProvider != null) objectiveItemProvider.dispose();
		if (normItemProvider != null) normItemProvider.dispose();
		if (individualDeonticStatementItemProvider != null) individualDeonticStatementItemProvider.dispose();
		if (roleDeonticStatementItemProvider != null) roleDeonticStatementItemProvider.dispose();
		if (rightItemProvider != null) rightItemProvider.dispose();
		if (hierarchyDependencyItemProvider != null) hierarchyDependencyItemProvider.dispose();
		if (marketDependencyItemProvider != null) marketDependencyItemProvider.dispose();
		if (networkDependencyItemProvider != null) networkDependencyItemProvider.dispose();
		if (sceneItemProvider != null) sceneItemProvider.dispose();
		if (transitionItemProvider != null) transitionItemProvider.dispose();
		if (sceneToTransitionArcItemProvider != null) sceneToTransitionArcItemProvider.dispose();
		if (transitionToSceneArcItemProvider != null) transitionToSceneArcItemProvider.dispose();
		if (playerItemProvider != null) playerItemProvider.dispose();
		if (landmarkPatternItemProvider != null) landmarkPatternItemProvider.dispose();
		if (landmarkItemProvider != null) landmarkItemProvider.dispose();
		if (transitionNormItemProvider != null) transitionNormItemProvider.dispose();
		if (partialOrderItemProvider != null) partialOrderItemProvider.dispose();
		if (atomItemProvider != null) atomItemProvider.dispose();
		if (constantItemProvider != null) constantItemProvider.dispose();
		if (variableItemProvider != null) variableItemProvider.dispose();
		if (functionItemProvider != null) functionItemProvider.dispose();
		if (negationItemProvider != null) negationItemProvider.dispose();
		if (conjunctionItemProvider != null) conjunctionItemProvider.dispose();
		if (disjunctionItemProvider != null) disjunctionItemProvider.dispose();
		if (implicationItemProvider != null) implicationItemProvider.dispose();
		if (forAllPathsItemProvider != null) forAllPathsItemProvider.dispose();
		if (existsPathItemProvider != null) existsPathItemProvider.dispose();
		if (pathNegationItemProvider != null) pathNegationItemProvider.dispose();
		if (pathConjunctionItemProvider != null) pathConjunctionItemProvider.dispose();
		if (pathDisjunctionItemProvider != null) pathDisjunctionItemProvider.dispose();
		if (pathImplicationItemProvider != null) pathImplicationItemProvider.dispose();
		if (nextItemProvider != null) nextItemProvider.dispose();
		if (sometimeItemProvider != null) sometimeItemProvider.dispose();
		if (alwaysItemProvider != null) alwaysItemProvider.dispose();
		if (untilItemProvider != null) untilItemProvider.dispose();
		if (ontologyItemProvider != null) ontologyItemProvider.dispose();
		if (conceptItemProvider != null) conceptItemProvider.dispose();
		if (countsAsItemProvider != null) countsAsItemProvider.dispose();
		if (actionsItemProvider != null) actionsItemProvider.dispose();
		if (atomicActionItemProvider != null) atomicActionItemProvider.dispose();
		if (sequenceItemProvider != null) sequenceItemProvider.dispose();
		if (conditionalItemProvider != null) conditionalItemProvider.dispose();
		if (contextItemProvider != null) contextItemProvider.dispose();
	}

}
